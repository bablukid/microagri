<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace controller;

use \db\Result;
use \php\_Boot\HxAnon;
use \db\User as DbUser;
use \php\Boot;
use \db\Question;
use \sugoi\form\elements\StringInput;
use \haxe\CallStack;
use \db\Questionnaire as DbQuestionnaire;
use \sys\db\Manager;
use \haxe\web\Dispatch;
use \db\Answer;
use \sugoi\BaseController;
use \php\_Boot\HxString;
use \sugoi\form\elements\IntSelect;
use \haxe\ds\StringMap;
use \sys\db\admin\Admin as AdminAdmin;
use \sugoi\form\validators\EmailValidator;
use \sugoi\form\elements\Checkbox;
use \db\Identifier;
use \php\_Boot\HxException;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;
use \sugoi\form\Form;

class Main extends BaseController {

	/**
	 * @return void
	 */
	public function __construct () {
		#src/controller/Main.hx:5: lines 5-426
		parent::__construct();
	}

	/**
	 * @param Dispatch $d
	 * 
	 * @return void
	 */
	public function doAdmin ($d) {
		#src/controller/Main.hx:56: characters 3-37
		$d->runtimeDispatch(Dispatch::extractConfig(new Admin()));
	}

	/**
	 * @return void
	 */
	public function doAnswers () {
		#src/controller/Main.hx:189: characters 3-53
		$farmNameQuestion = Question::getByRef("A1");
		#src/controller/Main.hx:192: lines 192-206
		if (array_key_exists("new", $this->app->params->data)) {
			#src/controller/Main.hx:194: characters 13-37
			if ($this->app->user === null) {
				#src/controller/Main.hx:194: characters 32-37
				throw new HxException($this->Redirect("/init"));
			}
			#src/controller/Main.hx:196: characters 13-37
			$x = new Answer();
			#src/controller/Main.hx:197: characters 13-30
			$x->set_user($this->app->user);
			#src/controller/Main.hx:198: characters 13-40
			$x->answer = "Nouvelle ferme";
			#src/controller/Main.hx:199: characters 4-163
			$x->dataset = Manager::$cnx->request("select max(dataset) from Answer where userId=" . ($this->app->user->id??'null') . " and questionId=" . ($farmNameQuestion->id??'null'))->getIntResult(0) + 1;
			#src/controller/Main.hx:200: characters 4-33
			$x->set_question($farmNameQuestion);
			#src/controller/Main.hx:201: characters 13-23
			$x->insert();
			#src/controller/Main.hx:202: characters 13-49
			$this->app->session->data->dataset = $x->dataset;
			#src/controller/Main.hx:203: characters 13-66
			$formulaire = \Std::parseInt(($this->app->params->data["new"] ?? null));
			#src/controller/Main.hx:205: characters 13-18
			throw new HxException($this->Ok("/q/" . ($formulaire??'null') . "/0/0", "Vous pouvez maintenant référencer une nouvelle ferme."));
		}
		#src/controller/Main.hx:209: lines 209-221
		if (array_key_exists("choose", $this->app->params->data)) {
			#src/controller/Main.hx:210: characters 4-39
			$this->app->session->data->forceUserId = null;
			#src/controller/Main.hx:211: characters 13-67
			$dataset = \Std::parseInt(($this->app->params->data["choose"] ?? null));
			#src/controller/Main.hx:212: characters 4-61
			$q = Answer::get($this->app->user, $farmNameQuestion, $dataset);
			#src/controller/Main.hx:214: characters 13-30
			if ($q === null) {
				#src/controller/Main.hx:214: characters 25-30
				throw new HxException($this->Error("/", "Answer with dataset " . ($dataset??'null') . " not found"));
			}
			#src/controller/Main.hx:217: characters 13-47
			$this->app->session->data->dataset = $dataset;
			#src/controller/Main.hx:220: characters 13-18
			throw new HxException($this->Ok("/q/1/0/0", "Vous modifiez maintenant le référencement de la ferme \"" . ($q->answer??'null') . "\"."));
		}
		#src/controller/Main.hx:224: characters 24-41
		$tmp = Answer::$manager;
		#src/controller/Main.hx:224: characters 49-97
		$tmp1 = "SELECT * FROM Answer WHERE userId = " . (Manager::quoteAny(DbUser::$manager->unsafeGetId($this->app->user))??'null') . ((" AND questionId = " . (Manager::quoteAny(Question::$manager->unsafeGetId($farmNameQuestion))??'null'))??'null') . " ORDER BY dataset DESC";
		#src/controller/Main.hx:224: characters 9-123
		$this->view->results = $tmp->unsafeObjects($tmp1, false);
	}

	/**
	 * @param Dispatch $d
	 * 
	 * @return void
	 */
	public function doChapitre ($d) {
		#src/controller/Main.hx:46: characters 3-40
		$d->runtimeDispatch(Dispatch::extractConfig(new Chapitre()));
	}

	/**
	 *  Admin BDD
	 * 
	 * @param Dispatch $d
	 * 
	 * @return void
	 */
	public function doDb ($d) {
		#src/controller/Main.hx:35: characters 3-15
		$d->parts = new \Array_hx();
		#src/controller/Main.hx:36: characters 3-31
		AdminAdmin::handler();
	}

	/**
	 * @return void
	 */
	public function doDefault () {
		#src/controller/Main.hx:27: characters 9-14
		throw new HxException($this->Redirect("/answers"));
	}

	/**
	 * create a user
	 * 
	 * @return void
	 */
	public function doInit () {
		#src/controller/Main.hx:145: characters 3-39
		$f = new Form("user");
		#src/controller/Main.hx:146: characters 3-82
		$this->view->text = "Avant de remplir le formulaire, merci de saisir vos coordonnées :";
		#src/controller/Main.hx:147: characters 3-76
		$f->addElement(new StringInput("name", "Nom", null, true));
		#src/controller/Main.hx:148: characters 3-79
		$f->addElement(new StringInput("email", "Email", null, true));
		#src/controller/Main.hx:149: characters 3-84
		$f->addElement(new StringInput("phone", "Téléphone", null, false));
		#src/controller/Main.hx:150: characters 3-120
		$f->addElement(new Checkbox("newsletter", "Tenez-moi au courant des avancées du projet", null, false));
		#src/controller/Main.hx:151: lines 151-165
		if ($f->isValid()) {
			#src/controller/Main.hx:152: characters 4-26
			$u = new DbUser();
			#src/controller/Main.hx:153: characters 4-33
			$u->name = $f->getValueOf("name");
			#src/controller/Main.hx:154: characters 4-35
			$u->email = $f->getValueOf("email");
			#src/controller/Main.hx:156: characters 8-59
			$value = $u->email;
			$val = new EmailValidator();
			#src/controller/Main.hx:156: characters 4-66
			if (!$val->isValid($value)) {
				#src/controller/Main.hx:156: characters 61-66
				throw new HxException($this->Error("/init", "Merci de saisir un email valide."));
			}
			#src/controller/Main.hx:158: characters 4-35
			$u->phone = $f->getValueOf("phone");
			#src/controller/Main.hx:159: characters 4-45
			$u->newsletter = $f->getValueOf("newsletter");
			#src/controller/Main.hx:160: characters 4-14
			$u->insert();
			#src/controller/Main.hx:161: characters 4-34
			\App::$current->session->setUser($u);
			#src/controller/Main.hx:164: characters 4-9
			throw new HxException($this->Redirect("/q/1/0/0"));
		}
		#src/controller/Main.hx:167: characters 3-16
		$this->view->form = $f;
	}

	/**
	 * @return void
	 */
	public function doInstall () {
		#src/controller/Main.hx:411: lines 411-423
		if (DbUser::$manager->unsafeGet(1, true) === null) {
			#src/controller/Main.hx:412: characters 4-29
			$user = new DbUser();
			#src/controller/Main.hx:413: characters 4-15
			$user->id = 1;
			#src/controller/Main.hx:414: characters 4-20
			$user->lang = "fr";
			#src/controller/Main.hx:415: characters 4-34
			$user->email = "admin@localhost";
			#src/controller/Main.hx:416: characters 4-23
			$user->name = "admin";
			#src/controller/Main.hx:417: characters 4-64
			$user->pass = md5((\App::$config->KEY??'null') . "admin");
			#src/controller/Main.hx:418: characters 4-17
			$user->insert();
			#src/controller/Main.hx:419: characters 4-29
			$this->app->session->setUser($user);
			#src/controller/Main.hx:420: characters 4-9
			throw new HxException($this->Ok("/", "Admin user created sucessfully"));
		} else {
			#src/controller/Main.hx:422: characters 4-9
			throw new HxException($this->Error("/", "Admin user already exists"));
		}
	}

	/**
	 * @param Identifier $i
	 * 
	 * @return void
	 */
	public function doLink ($i) {
		#src/controller/Main.hx:343: characters 3-39
		$f = new Form("link");
		#src/controller/Main.hx:344: characters 3-17
		$data = new \Array_hx();
		#src/controller/Main.hx:345: characters 13-41
		$_g_head = Result::$manager->all(false)->h;
		#src/controller/Main.hx:345: lines 345-350
		while ($_g_head !== null) {
			$val = $_g_head->item;
			$_g_head = $_g_head->next;
			$r = $val;
			#src/controller/Main.hx:347: lines 347-349
			if (Identifier::$manager->unsafeObjects("SELECT * FROM Identifier WHERE " . (Manager::nullCompare("resultId", Manager::quoteAny(Result::$manager->unsafeGetId($r)), true)??'null'), false)->first() === null) {
				#src/controller/Main.hx:348: characters 5-53
				$data->arr[$data->length] = new HxAnon([
					"label" => "#" . ($r->id??'null') . "-" . ($r->Nom??'null'),
					"value" => $r->id,
				]);
				++$data->length;
			}
		}

		#src/controller/Main.hx:352: characters 3-84
		$f->addElement(new IntSelect("r", "Recensement", $data, null, true));
		#src/controller/Main.hx:354: lines 354-362
		if ($f->isValid()) {
			#src/controller/Main.hx:355: characters 4-32
			$rid = $f->getValueOf("r");
			#src/controller/Main.hx:356: characters 4-45
			$r1 = Result::$manager->unsafeGet($rid, false);
			#src/controller/Main.hx:357: characters 4-12
			$i->lock();
			#src/controller/Main.hx:358: characters 4-16
			$i->set_result($r1);
			#src/controller/Main.hx:359: characters 4-14
			$i->update();
			#src/controller/Main.hx:361: characters 4-9
			throw new HxException($this->Ok("/signalements", "Le signalement a été relié à un recensement"));
		}
		#src/controller/Main.hx:363: characters 3-13
		$this->view->title = $i->nom;
		#src/controller/Main.hx:364: characters 3-12
		$this->view->text = "Relier le signalement <b>#" . ($i->id??'null') . "-" . ($i->nom??'null') . "</b> à un recensement";
		#src/controller/Main.hx:365: characters 3-12
		$this->view->form = $f;
	}

	/**
	 * @param Dispatch $d
	 * 
	 * @return void
	 */
	public function doPage ($d) {
		#src/controller/Main.hx:51: characters 3-36
		$d->runtimeDispatch(Dispatch::extractConfig(new Page()));
	}

	/**
	 * @param DbQuestionnaire $questionnaire
	 * @param int $chapitreIndex
	 * @param int $pageIndex
	 * 
	 * @return void
	 */
	public function doQ ($questionnaire, $chapitreIndex, $pageIndex) {
		#src/controller/Main.hx:67: characters 3-27
		if ($this->app->user === null) {
			#src/controller/Main.hx:67: characters 22-27
			throw new HxException($this->Redirect("/init"));
		}
		#src/controller/Main.hx:69: characters 3-62
		$chapitre = ($questionnaire->getChapitres()->arr[$chapitreIndex] ?? null);
		#src/controller/Main.hx:70: characters 3-27
		if ($chapitre === null) {
			#src/controller/Main.hx:70: characters 22-27
			throw new HxException($this->Error("/", "Chapitre is null"));
		}
		#src/controller/Main.hx:71: characters 3-46
		$page = ($chapitre->getPages()->arr[$pageIndex] ?? null);
		#src/controller/Main.hx:72: characters 3-23
		if ($page === null) {
			#src/controller/Main.hx:72: characters 18-23
			throw new HxException($this->Error("/", "Page is null"));
		}
		#src/controller/Main.hx:73: characters 3-39
		$questions = $page->getQuestions();
		#src/controller/Main.hx:75: characters 9-43
		$this->view->questionnaire = $questionnaire;
		#src/controller/Main.hx:76: characters 3-28
		$this->view->chapitre = $chapitre;
		#src/controller/Main.hx:77: characters 3-37
		$this->view->chapitreIndex = $chapitreIndex;
		#src/controller/Main.hx:78: characters 3-19
		$this->view->page = $page;
		#src/controller/Main.hx:79: characters 3-29
		$this->view->pageIndex = $pageIndex;
		#src/controller/Main.hx:80: characters 3-95
		$this->view->previousURL = \QuestionService::getPreviousPageURL($questionnaire, $chapitreIndex, $pageIndex);
		#src/controller/Main.hx:81: characters 3-35
		$this->view->farmName = $this->getCurrentFarm();
		#src/controller/Main.hx:83: characters 3-29
		\Hooks::beforeForm($chapitre);
		#src/controller/Main.hx:86: characters 3-46
		$f = \QuestionService::getForm($questions);
		#src/controller/Main.hx:87: characters 3-27
		$this->view->form = ($f->toString)();
		#src/controller/Main.hx:91: lines 91-137
		if ($f->isValid()) {
			#src/controller/Main.hx:94: lines 94-98
			try {
				#src/controller/Main.hx:95: characters 5-47
				\Hooks::onFormSubmit($chapitre, $f, $questions);
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				if (is_string($__hx__real_e)) {
					$e = $__hx__real_e;
					#src/controller/Main.hx:97: characters 5-10
					throw new HxException($this->Error("/q/" . ($questionnaire->id??'null') . "/" . ($chapitreIndex??'null') . "/" . ($pageIndex??'null'), $e));
				} else  throw $__hx__caught_e;
			}
			#src/controller/Main.hx:103: lines 103-115
			$_g = 0;
			while ($_g < $questions->length) {
				#src/controller/Main.hx:103: characters 8-9
				$q = ($questions->arr[$_g] ?? null);
				#src/controller/Main.hx:103: lines 103-115
				++$_g;
				#src/controller/Main.hx:104: characters 5-38
				$answer = $f->getValueOf($q->ref);
				#src/controller/Main.hx:106: characters 5-59
				$answer1 = \QuestionService::serialize($answer, $q->get_type());
				#src/controller/Main.hx:107: characters 5-58
				$storedAnswer = Answer::getOrCreate($this->app->user, $q);
				#src/controller/Main.hx:109: lines 109-114
				if ($storedAnswer->answer !== $answer1) {
					#src/controller/Main.hx:110: characters 6-25
					$storedAnswer->lock();
					#src/controller/Main.hx:111: characters 6-37
					$storedAnswer->ldate = \Date::now();
					#src/controller/Main.hx:112: characters 6-36
					$storedAnswer->answer = $answer1;
					#src/controller/Main.hx:113: characters 6-27
					$storedAnswer->update();
				}
			}

			#src/controller/Main.hx:118: characters 4-100
			$nextPageURL = \QuestionService::getNextPageURL($questionnaire, $chapitreIndex, $pageIndex);
			#src/controller/Main.hx:132: lines 132-136
			if (HxString::indexOf($nextPageURL, "/q/") === -1) {
				#src/controller/Main.hx:133: characters 5-10
				throw new HxException($this->Ok($nextPageURL, "Ce formulaire est terminé."));
			} else {
				#src/controller/Main.hx:135: characters 5-10
				throw new HxException($this->Redirect($nextPageURL));
			}
		}
	}

	/**
	 *  Home questionnaire complet
	 * 
	 * @return void
	 */
	public function doQhome () {
		#src/controller/Main.hx:11: characters 3-55
		$questionnaire = DbQuestionnaire::$manager->unsafeGet(3, true);
		#src/controller/Main.hx:12: characters 3-25
		$this->view->category = "home";
		#src/controller/Main.hx:13: characters 3-48
		$this->view->chapitres = $questionnaire->getChapitres();
		#src/controller/Main.hx:14: characters 3-67
		$this->view->getChapterCompletion = Boot::getStaticClosure(\QuestionService::class, 'getChapterCompletion');
		#src/controller/Main.hx:15: characters 3-52
		$this->view->alphabet = \Array_hx::wrap([
			"A",
			"B",
			"C",
			"D",
			"E",
			"F",
			"G",
			"H",
		]);
		#src/controller/Main.hx:17: lines 17-23
		if ($this->app->user !== null) {
			#src/controller/Main.hx:18: characters 4-96
			$dataset = (Boot::dynamicField(\App::$current->session->data, 'dataset') === null ? 1 : Boot::dynamicField(\App::$current->session->data, 'dataset'));
			#src/controller/Main.hx:19: characters 4-78
			$compl = \QuestionService::getCompletion($questionnaire, $this->app->user, $dataset);
			#src/controller/Main.hx:20: characters 4-32
			$this->view->percent = $compl->percent;
			#src/controller/Main.hx:21: characters 4-26
			$this->view->dataset = $dataset;
		}
	}

	/**
	 * @param Dispatch $d
	 * 
	 * @return void
	 */
	public function doQuestionnaire ($d) {
		#src/controller/Main.hx:41: characters 3-45
		$d->runtimeDispatch(Dispatch::extractConfig(new Questionnaire()));
	}

	/**
	 * @return void
	 */
	public function doReponses () {
		#src/controller/Main.hx:232: lines 232-238
		if ($this->checkToken() && (($this->app->params->data["delete"] ?? null) === "1")) {
			#src/controller/Main.hx:233: characters 13-67
			$dataset = \Std::parseInt(($this->app->params->data["dataset"] ?? null));
			#src/controller/Main.hx:234: characters 4-52
			$user = \Std::parseInt(($this->app->params->data["user"] ?? null));
			#src/controller/Main.hx:235: characters 4-47
			$user1 = DbUser::$manager->unsafeGet($user, false);
			#src/controller/Main.hx:236: characters 13-71
			Answer::$manager->unsafeDelete("DELETE FROM Answer WHERE userId = " . (Manager::quoteAny(DbUser::$manager->unsafeGetId($user1))??'null') . ((" AND " . (Manager::nullCompare("dataset", Manager::quoteAny($dataset), true)??'null'))??'null'));
			#src/controller/Main.hx:237: characters 13-18
			throw new HxException($this->Ok("/reponses", "Réponses effacées"));
		}
		#src/controller/Main.hx:241: lines 241-250
		if ((($this->app->params->data["choose"] ?? null) === "1") && $this->app->user->isAdmin()) {
			#src/controller/Main.hx:243: characters 4-58
			$dataset1 = \Std::parseInt(($this->app->params->data["dataset"] ?? null));
			#src/controller/Main.hx:244: characters 4-52
			$user2 = \Std::parseInt(($this->app->params->data["user"] ?? null));
			#src/controller/Main.hx:245: characters 4-47
			$user3 = DbUser::$manager->unsafeGet($user2, false);
			#src/controller/Main.hx:247: characters 4-32
			$this->app->session->data->forceUserId = $user3->id;
			#src/controller/Main.hx:248: characters 4-28
			$this->app->session->data->dataset = $dataset1;
			#src/controller/Main.hx:249: characters 4-9
			throw new HxException($this->Ok("/q/3/0/0", "Vous modifiez maintenant la réponse " . ($dataset1??'null') . " de " . ($user3->name??'null')));
		}
		#src/controller/Main.hx:252: characters 3-53
		$allQuestions = Question::$manager->all(false);
		#src/controller/Main.hx:255: characters 3-20
		$headers = new \Array_hx();
		#src/controller/Main.hx:256: characters 13-25
		$_g_head = $allQuestions->h;
		#src/controller/Main.hx:256: lines 256-258
		while ($_g_head !== null) {
			$val = $_g_head->item;
			$_g_head = $_g_head->next;
			$q = $val;
			#src/controller/Main.hx:257: characters 4-25
			$headers->arr[$headers->length] = $q->label;
			++$headers->length;

		}

		#src/controller/Main.hx:261: characters 3-52
		$answers = new StringMap();
		#src/controller/Main.hx:262: characters 3-128
		$answersByUserDataset = Manager::$cnx->request("SELECT userId,dataset FROM Answer group by userId,dataset")->results();
		#src/controller/Main.hx:264: characters 23-43
		$_g1_head = $answersByUserDataset->h;
		#src/controller/Main.hx:264: lines 264-273
		while ($_g1_head !== null) {
			$val1 = $_g1_head->item;
			$_g1_head = $_g1_head->next;
			$userDataset = $val1;
			#src/controller/Main.hx:265: characters 4-15
			$l = new \Array_hx();
			#src/controller/Main.hx:266: characters 4-61
			$user4 = DbUser::$manager->unsafeGet($userDataset->userId, false);
			#src/controller/Main.hx:267: characters 4-38
			$dataset2 = $userDataset->dataset;
			#src/controller/Main.hx:268: characters 14-26
			$_g1_head1 = $allQuestions->h;
			#src/controller/Main.hx:268: lines 268-271
			while ($_g1_head1 !== null) {
				$val2 = $_g1_head1->item;
				$_g1_head1 = $_g1_head1->next;
				$q1 = $val2;
				#src/controller/Main.hx:269: characters 5-49
				$a = Answer::get($user4, $q1, $dataset2, false);
				#src/controller/Main.hx:270: characters 5-16
				$l->arr[$l->length] = $a;
				++$l->length;

			}

			#src/controller/Main.hx:272: characters 4-36
			$answers->data[($user4->id??'null') . "-" . ($dataset2??'null')] = $l;
		}

		#src/controller/Main.hx:275: characters 3-15
		$this->view->answers = $answers;
		#src/controller/Main.hx:276: characters 3-15
		$this->view->headers = $headers;
		#src/controller/Main.hx:277: characters 3-20
		$this->view->allQuestions = $allQuestions;
		#src/controller/Main.hx:278: characters 3-18
		$this->view->getFromMap = function ($map, $key) {
			#src/controller/Main.hx:279: characters 4-23
			return ($map->data[$key] ?? null);
		};
		#src/controller/Main.hx:282: characters 3-21
		$this->view->getCompletion = function ($_answers)  use (&$allQuestions) {
			#src/controller/Main.hx:284: characters 4-25
			$totalAnswers = 0;
			#src/controller/Main.hx:285: characters 4-50
			$_g2 = 0;
			while ($_g2 < $_answers->length) {
				#src/controller/Main.hx:285: characters 8-9
				$a1 = ($_answers->arr[$_g2] ?? null);
				#src/controller/Main.hx:285: characters 4-50
				++$_g2;
				#src/controller/Main.hx:285: characters 24-50
				if ($a1 !== null) {
					#src/controller/Main.hx:285: characters 36-50
					++$totalAnswers;
				}
			}

			#src/controller/Main.hx:288: characters 11-63
			return (int)(floor($totalAnswers / $allQuestions->length * 100 + 0.5));
		};
		#src/controller/Main.hx:292: lines 292-324
		if ((\App::$current->params->data["csv"] ?? null) === "1") {
			#src/controller/Main.hx:294: characters 4-45
			$csvData = new \Array_hx();
			#src/controller/Main.hx:297: characters 4-27
			$headers->length = array_unshift($headers->arr, "date");
			#src/controller/Main.hx:298: characters 4-33
			$headers->length = array_unshift($headers->arr, "completion");
			#src/controller/Main.hx:299: characters 4-25
			$headers->length = array_unshift($headers->arr, "ID");
			#src/controller/Main.hx:301: characters 14-28
			$k = new NativeIndexedArrayIterator(array_map("strval", array_keys($answers->data)));
			while ($k->hasNext()) {
				#src/controller/Main.hx:301: lines 301-312
				$k1 = $k->next();
				#src/controller/Main.hx:302: characters 5-28
				$a2 = ($answers->data[$k1] ?? null);
				#src/controller/Main.hx:304: characters 5-84
				$row = \Lambda::array(\Lambda::map($a2, function ($x) {
					#src/controller/Main.hx:304: characters 61-80
					if ($x === null) {
						#src/controller/Main.hx:304: characters 69-71
						return "";
					} else {
						#src/controller/Main.hx:304: characters 72-80
						return $x->answer;
					}
				}));
				#src/controller/Main.hx:307: characters 5-54
				if (($a2->arr[0] ?? null) !== null) {
					#src/controller/Main.hx:307: characters 20-54
					$x1 = ($a2->arr[0] ?? null)->cdate->toString();
					$row->length = array_unshift($row->arr, $x1);
				}
				#src/controller/Main.hx:308: characters 5-39
				$x2 = $this->view->getCompletion($a2);
				$row->length = array_unshift($row->arr, $x2);

				#src/controller/Main.hx:309: characters 5-19
				$row->length = array_unshift($row->arr, $k1);
				#src/controller/Main.hx:311: characters 5-24
				$csvData->arr[$csvData->length] = $row;
				++$csvData->length;

			}

			#src/controller/Main.hx:316: characters 4-82
			$writer = \Box\Spout\Writer\WriterFactory::create(\Box\Spout\Common\Type::CSV);
			#src/controller/Main.hx:317: characters 4-40
			$writer->openToBrowser("reponses.csv");
			#src/controller/Main.hx:318: characters 4-46
			$writer->addRow($headers->arr);
			#src/controller/Main.hx:319: lines 319-321
			$_g21 = 0;
			while ($_g21 < $csvData->length) {
				#src/controller/Main.hx:319: characters 9-10
				$d = ($csvData->arr[$_g21] ?? null);
				#src/controller/Main.hx:319: lines 319-321
				++$_g21;
				#src/controller/Main.hx:320: characters 5-41
				$writer->addRow($d->arr);
			}

			#src/controller/Main.hx:322: characters 4-18
			$writer->close();
		}
	}

	/**
	 * @return void
	 */
	public function doTitle () {
		#src/controller/Main.hx:181: characters 9-49
		$r = Result::getOrCreate($this->app->user);
		#src/controller/Main.hx:182: characters 9-58
		$this->view->responsable = $r->recenseur_responsable === "OUI";
	}

	/**
	 * @param Dispatch $d
	 * 
	 * @return void
	 */
	public function doUser ($d) {
		#src/controller/Main.hx:60: characters 3-36
		$d->runtimeDispatch(Dispatch::extractConfig(new User()));
	}

	/**
	 * @return string
	 */
	public function getCurrentFarm () {
		#src/controller/Main.hx:171: lines 171-175
		try {
			#src/controller/Main.hx:172: characters 4-47
			return Answer::getAnswerOf("A1", $this->app->user);
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#src/controller/Main.hx:174: characters 4-15
			return null;
		}
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}

Boot::registerClass(Main::class, 'controller.Main');
Boot::registerMeta(Main::class, new HxAnon([
	"obj" => new HxAnon(["dispatchConfig" => \Array_hx::wrap(["oy7:answersjy21:haxe.web.DispatchRule:3:1jR1:1:1ahy4:linkjR1:3:1jR1:0:1jy18:haxe.web.MatchRule:7:2y13:db.Identifierfy5:titlejR1:3:1jR1:1:1ahy2:dbjR1:3:1jR1:0:1jR3:6:0y5:qhomejR1:3:1jR1:1:1ahy4:initjR1:3:1jR1:1:1ahy13:questionnairejR1:3:1jR1:0:1jR3:6:0y1:qjR1:3:1jR1:1:1ajR3:7:2y16:db.QuestionnairefjR3:0:0jR3:0:0hy7:installjR1:1:1ahy5:adminjR1:3:1jR1:0:1jR3:6:0y4:userjR1:0:1jR3:6:0y8:reponsesjR1:3:1jR1:1:1ahy4:pagejR1:3:1jR1:0:1jR3:6:0y4:filejR1:0:1jR3:3:0y7:defaultjR1:1:1ahy8:chapitrejR1:3:1jR1:0:1jR3:6:0g"])]),
	"fields" => new HxAnon([
		"doQhome" => new HxAnon(["tpl" => \Array_hx::wrap(["qhome.mtt"])]),
		"doDb" => new HxAnon(["admin" => null]),
		"doQuestionnaire" => new HxAnon(["admin" => null]),
		"doChapitre" => new HxAnon(["admin" => null]),
		"doPage" => new HxAnon(["admin" => null]),
		"doAdmin" => new HxAnon(["admin" => null]),
		"doQ" => new HxAnon(["tpl" => \Array_hx::wrap(["q.twig"])]),
		"doInit" => new HxAnon(["tpl" => \Array_hx::wrap(["form.twig"])]),
		"doTitle" => new HxAnon(["tpl" => \Array_hx::wrap(["title.mtt"])]),
		"doAnswers" => new HxAnon(["tpl" => \Array_hx::wrap(["answers.twig"])]),
		"doReponses" => new HxAnon([
			"admin" => null,
			"tpl" => \Array_hx::wrap(["reponses.twig"]),
		]),
		"doLink" => new HxAnon([
			"admin" => null,
			"tpl" => \Array_hx::wrap(["form.twig"]),
		]),
	]),
]));
Main::__hx__init();
