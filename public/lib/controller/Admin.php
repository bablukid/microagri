<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace controller;

use \db\Page as DbPage;
use \db\Result;
use \php\_Boot\HxAnon;
use \db\Chapitre as DbChapitre;
use \db\QuestionPage;
use \php\Boot;
use \db\Question;
use \db\Questionnaire as DbQuestionnaire;
use \db\QuestionType;
use \sys\db\Manager;
use \db\Answer;
use \sugoi\BaseController;
use \haxe\ds\IntMap;
use \php\_Boot\HxException;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;

class Admin extends BaseController {

	/**
	 * @return void
	 */
	public function __construct () {
		#src/controller/Admin.hx:10: characters 3-10
		parent::__construct();
	}

	/**
	 * @return void
	 */
	public function doMigrate () {
		#src/controller/Admin.hx:30: characters 18-42
		$i = new NativeIndexedArrayIterator(array_keys(\QData::$formulaires->data));
		while ($i->hasNext()) {
			#src/controller/Admin.hx:30: lines 30-123
			$i1 = $i->next();
			#src/controller/Admin.hx:32: characters 13-45
			$form = (\QData::$formulaires->data[$i1] ?? null);
			#src/controller/Admin.hx:34: characters 13-45
			$qu = new DbQuestionnaire();
			#src/controller/Admin.hx:35: characters 13-22
			$qu->id = $i1;
			#src/controller/Admin.hx:36: characters 13-31
			$qu->name = $form->nom;
			#src/controller/Admin.hx:37: characters 13-46
			$qu->startScreen = $form->startScreen;
			#src/controller/Admin.hx:38: characters 13-42
			$qu->endScreen = $form->endScreen;
			#src/controller/Admin.hx:39: characters 13-24
			$qu->insert();
			#src/controller/Admin.hx:40: characters 13-41
			$this->print("Questionnaire : " . (\Std::string($qu)??'null'));
			#src/controller/Admin.hx:42: characters 13-35
			$chapitreIndex = 0;
			#src/controller/Admin.hx:44: lines 44-120
			$_g = 0;
			$_g1 = $form->chapitres;
			while ($_g < $_g1->length) {
				#src/controller/Admin.hx:44: characters 18-26
				$chapitre = ($_g1->arr[$_g] ?? null);
				#src/controller/Admin.hx:44: lines 44-120
				++$_g;
				#src/controller/Admin.hx:46: characters 17-44
				$ch = new DbChapitre();
				#src/controller/Admin.hx:47: characters 17-38
				$ch->set_questionnaire($qu);
				#src/controller/Admin.hx:48: characters 17-40
				$ch->title = $chapitre->nom;
				#src/controller/Admin.hx:49: characters 17-41
				$ch->order = $chapitreIndex;
				#src/controller/Admin.hx:50: characters 17-28
				$ch->insert();
				#src/controller/Admin.hx:51: characters 17-49
				$this->print("== Chapitre : " . ($ch->title??'null'));
				#src/controller/Admin.hx:53: characters 17-35
				$pageIndex = 0;
				#src/controller/Admin.hx:55: lines 55-116
				$_g2 = 0;
				$_g11 = $chapitre->ordre;
				while ($_g2 < $_g11->length) {
					#src/controller/Admin.hx:55: characters 21-25
					$page = ($_g11->arr[$_g2] ?? null);
					#src/controller/Admin.hx:55: lines 55-116
					++$_g2;
					#src/controller/Admin.hx:57: characters 21-43
					$p = new DbPage();
					#src/controller/Admin.hx:58: characters 21-41
					$p->title = $page->titre;
					#src/controller/Admin.hx:59: characters 21-46
					$p->description = $page->desc;
					#src/controller/Admin.hx:60: characters 21-40
					$p->order = $pageIndex;
					#src/controller/Admin.hx:61: characters 21-36
					$p->set_chapitre($ch);
					#src/controller/Admin.hx:62: characters 21-31
					$p->insert();
					#src/controller/Admin.hx:63: characters 21-50
					$this->print("==== Page : " . ($p->title??'null'));
					#src/controller/Admin.hx:65: characters 21-36
					$qindex = 0;
					#src/controller/Admin.hx:67: lines 67-112
					$_g3 = 0;
					$_g12 = $page->qs;
					while ($_g3 < $_g12->length) {
						#src/controller/Admin.hx:67: characters 26-29
						$qid = ($_g12->arr[$_g3] ?? null);
						#src/controller/Admin.hx:67: lines 67-112
						++$_g3;
						#src/controller/Admin.hx:69: characters 25-56
						$this->print("====== Question : " . ($qid??'null'));
						#src/controller/Admin.hx:70: characters 25-59
						$q = Question::getByRef($qid);
						#src/controller/Admin.hx:71: lines 71-103
						if ($q === null) {
							#src/controller/Admin.hx:72: characters 29-50
							$q = new Question();
							#src/controller/Admin.hx:73: characters 29-65
							$question = (\QData::$questions->data[$qid] ?? null);
							#src/controller/Admin.hx:74: characters 29-53
							if ($question === null) {
								#src/controller/Admin.hx:74: characters 48-53
								throw new HxException("unknown question " . ($qid??'null'));
							}
							#src/controller/Admin.hx:75: characters 29-52
							$q->question = $question->q;
							#src/controller/Admin.hx:76: characters 29-58
							$q->description = $question->desc;
							#src/controller/Admin.hx:77: characters 29-53
							$q->label = $question->label;
							#src/controller/Admin.hx:78: characters 29-40
							$q->ref = $qid;
							#src/controller/Admin.hx:79: characters 45-58
							$_g4 = $question->type;
							#src/controller/Admin.hx:79: lines 79-89
							$tmp = null;
							#src/controller/Admin.hx:79: characters 45-58
							$__hx__switch = ($_g4->index);
							if ($__hx__switch === 0) {
								#src/controller/Admin.hx:79: lines 79-89
								$tmp = QuestionType::QText();
							} else if ($__hx__switch === 1) {
								$tmp = QuestionType::QString();
							} else if ($__hx__switch === 2) {
								$tmp = QuestionType::QInt();
							} else if ($__hx__switch === 3) {
								$tmp = QuestionType::QFloat();
							} else if ($__hx__switch === 4) {
								$tmp = QuestionType::QAddress();
							} else if ($__hx__switch === 5) {
								#src/controller/Admin.hx:85: characters 50-55
								$other = $_g4->params[1];
								#src/controller/Admin.hx:85: characters 45-49
								$list = $_g4->params[0];
								#src/controller/Admin.hx:79: lines 79-89
								$tmp = QuestionType::QRadio();
							} else if ($__hx__switch === 6) {
								#src/controller/Admin.hx:86: characters 59-65
								$extras = $_g4->params[2];
								#src/controller/Admin.hx:86: characters 53-58
								$other1 = $_g4->params[1];
								#src/controller/Admin.hx:86: characters 48-52
								$list1 = $_g4->params[0];
								#src/controller/Admin.hx:79: lines 79-89
								$tmp = QuestionType::QCheckbox();
							} else if ($__hx__switch === 7) {
								$tmp = QuestionType::QYesNo();
							} else if ($__hx__switch === 8) {
								#src/controller/Admin.hx:88: characters 50-56
								$extras1 = $_g4->params[0];
								#src/controller/Admin.hx:79: lines 79-89
								$tmp = QuestionType::QMultiInput();
							}
							$q->set_type($tmp);
							#src/controller/Admin.hx:90: characters 45-58
							$_g13 = $question->type;
							#src/controller/Admin.hx:90: lines 90-100
							$tmp1 = null;
							#src/controller/Admin.hx:90: characters 45-58
							$__hx__switch = ($_g13->index);
							if ($__hx__switch === 0) {
								#src/controller/Admin.hx:90: lines 90-100
								$tmp1 = null;
							} else if ($__hx__switch === 1) {
								$tmp1 = null;
							} else if ($__hx__switch === 2) {
								$tmp1 = null;
							} else if ($__hx__switch === 3) {
								$tmp1 = null;
							} else if ($__hx__switch === 4) {
								$tmp1 = null;
							} else if ($__hx__switch === 5) {
								#src/controller/Admin.hx:96: characters 50-55
								$other2 = $_g13->params[1];
								#src/controller/Admin.hx:96: characters 45-49
								$list2 = $_g13->params[0];
								#src/controller/Admin.hx:90: lines 90-100
								$tmp1 = new HxAnon([
									"list" => $list2,
									"other" => $other2,
								]);
							} else if ($__hx__switch === 6) {
								#src/controller/Admin.hx:97: characters 59-65
								$extras2 = $_g13->params[2];
								#src/controller/Admin.hx:97: characters 53-58
								$other3 = $_g13->params[1];
								#src/controller/Admin.hx:97: characters 48-52
								$list3 = $_g13->params[0];
								#src/controller/Admin.hx:90: lines 90-100
								$tmp1 = new HxAnon([
									"list" => $list3,
									"other" => $other3,
									"extras" => $extras2,
								]);
							} else if ($__hx__switch === 7) {
								$tmp1 = null;
							} else if ($__hx__switch === 8) {
								#src/controller/Admin.hx:99: characters 50-56
								$extras3 = $_g13->params[0];
								#src/controller/Admin.hx:90: lines 90-100
								$tmp1 = new HxAnon(["extras" => $extras3]);
							}
							$q->set_data($tmp1);
							#src/controller/Admin.hx:102: characters 29-39
							$q->insert();
						}
						#src/controller/Admin.hx:105: characters 25-56
						$qp = new QuestionPage();
						#src/controller/Admin.hx:106: characters 25-42
						$qp->order = $qindex;
						#src/controller/Admin.hx:107: characters 25-40
						$qp->set_question($q);
						#src/controller/Admin.hx:108: characters 25-36
						$qp->set_page($p);
						#src/controller/Admin.hx:109: characters 25-36
						$qp->insert();
						#src/controller/Admin.hx:111: characters 25-33
						++$qindex;
					}

					#src/controller/Admin.hx:114: characters 21-32
					++$pageIndex;
				}

				#src/controller/Admin.hx:118: characters 17-32
				++$chapitreIndex;
			}

		}
	}

	/**
	 * @return void
	 */
	public function doMigrateAnswers () {
		#src/controller/Admin.hx:129: characters 9-46
		$countByUser = new IntMap();
		#src/controller/Admin.hx:131: characters 19-42
		$_g_head = Result::$manager->all()->h;
		#src/controller/Admin.hx:131: lines 131-161
		while ($_g_head !== null) {
			$val = $_g_head->item;
			$_g_head = $_g_head->next;
			$r = $val;
			#src/controller/Admin.hx:133: lines 133-139
			$dataset = null;
			#src/controller/Admin.hx:133: characters 35-57
			$key = $r->get_user()->id;
			#src/controller/Admin.hx:133: lines 133-139
			if (($countByUser->data[$key] ?? null) === null) {
				#src/controller/Admin.hx:134: characters 17-43
				$k = $r->get_user()->id;
				$countByUser->data[$k] = 1;

				#src/controller/Admin.hx:133: lines 133-139
				$dataset = 1;
			} else {
				#src/controller/Admin.hx:137: characters 29-38
				$tmp = $r->get_user()->id;
				#src/controller/Admin.hx:137: characters 17-41
				$v = ($countByUser->data[$tmp] ?? null) + 1;
				$countByUser->data[$tmp] = $v;


				#src/controller/Admin.hx:138: characters 17-39
				$key1 = $r->get_user()->id;
				#src/controller/Admin.hx:133: lines 133-139
				$dataset = ($countByUser->data[$key1] ?? null);
			}
			#src/controller/Admin.hx:141: lines 141-158
			$_g = 0;
			$_g1 = \Reflect::fields($r);
			while ($_g < $_g1->length) {
				#src/controller/Admin.hx:141: characters 19-20
				$f = ($_g1->arr[$_g] ?? null);
				#src/controller/Admin.hx:141: lines 141-158
				++$_g;
				#src/controller/Admin.hx:143: characters 17-48
				if (mb_substr($f, 0, 1) === "_") {
					#src/controller/Admin.hx:143: characters 40-48
					continue;
				}
				#src/controller/Admin.hx:144: characters 17-61
				if (($f === "userId") || ($f === "id") || ($f === "user")) {
					#src/controller/Admin.hx:144: characters 53-61
					continue;
				}
				#src/controller/Admin.hx:146: characters 17-70
				$question = Question::$manager->unsafeObjects("SELECT * FROM Question WHERE `label` = " . (Manager::quoteAny($f)??'null'), true)->first();
				#src/controller/Admin.hx:147: characters 17-44
				if ($question === null) {
					#src/controller/Admin.hx:147: characters 36-44
					continue;
				}
				#src/controller/Admin.hx:149: characters 17-41
				$a = new Answer();
				#src/controller/Admin.hx:150: characters 17-32
				$a->set_user($r->get_user());
				#src/controller/Admin.hx:151: characters 17-26
				$a->dataset = $dataset;
				#src/controller/Admin.hx:152: characters 17-38
				$a->set_question($question);
				#src/controller/Admin.hx:153: characters 17-25
				$a->answer = \Reflect::field($r, $f);
				#src/controller/Admin.hx:154: characters 17-27
				$a->insert();
				#src/controller/Admin.hx:156: characters 17-70
				$this->print("" . ($f??'null') . " (" . ($a->get_question()->ref??'null') . ") for user " . ($a->get_user()->id??'null'));
			}

		}

	}

	/**
	 * @param string $str
	 * 
	 * @return void
	 */
	public function print ($str) {
		#src/controller/Admin.hx:24: characters 9-35
		echo((\Std::string("<p>" . ($str??'null') . "</p>")??'null') . "\x0A");
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}

Boot::registerClass(Admin::class, 'controller.Admin');
Boot::registerMeta(Admin::class, new HxAnon([
	"obj" => new HxAnon(["dispatchConfig" => \Array_hx::wrap(["oy14:migrateAnswersjy21:haxe.web.DispatchRule:1:1ahy7:migratejR1:3:1jR1:1:1ahy4:filejR1:0:1jy18:haxe.web.MatchRule:3:0g"])]),
	"fields" => new HxAnon(["doMigrate" => new HxAnon(["admin" => null])]),
]));
Admin::__hx__init();
