<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace controller;

use \db\Page as DbPage;
use \sugoi\form\elements\Html;
use \php\_Boot\HxAnon;
use \db\Chapitre as DbChapitre;
use \db\QuestionPage;
use \php\Boot;
use \sugoi\form\elements\TextArea;
use \db\Question;
use \sugoi\form\elements\StringSelect;
use \sugoi\form\elements\StringInput;
use \db\QuestionType;
use \sys\db\Manager;
use \sugoi\BaseController;
use \sugoi\form\elements\Checkbox;
use \php\_Boot\HxException;
use \sugoi\form\Form;

class Page extends BaseController {

	/**
	 * @return void
	 */
	public function __construct () {
		#src/controller/Page.hx:11: characters 3-10
		parent::__construct();
	}

	/**
	 * Add a question to a page
	 * 
	 * @param DbPage $page
	 * 
	 * @return void
	 */
	public function doAddQuestion ($page) {
		#src/controller/Page.hx:53: characters 9-45
		$f = new Form("addq");
		#src/controller/Page.hx:54: characters 9-89
		$f->addElement(new StringInput("ref", "Référence de question"));
		#src/controller/Page.hx:57: lines 57-69
		if ($f->isValid()) {
			#src/controller/Page.hx:58: characters 12-42
			$ref = $f->getValueOf("ref");
			#src/controller/Page.hx:59: characters 12-46
			$q = Question::getByRef($ref);
			#src/controller/Page.hx:60: characters 12-29
			if ($q === null) {
				#src/controller/Page.hx:60: characters 24-29
				throw new HxException("il n'existe pas de question avec la référence " . ($ref??'null'));
			}
			#src/controller/Page.hx:61: characters 12-43
			$qp = new QuestionPage();
			#src/controller/Page.hx:62: characters 12-27
			$qp->set_question($q);
			#src/controller/Page.hx:63: characters 12-26
			$qp->set_page($page);
			#src/controller/Page.hx:64: characters 12-67
			$qp->order = QuestionPage::$manager->unsafeCount("SELECT COUNT(*) FROM QuestionPage WHERE pageId = " . (Manager::quoteAny(DbPage::$manager->unsafeGetId($page))??'null')) + 1;
			#src/controller/Page.hx:65: characters 12-23
			$qp->insert();
			#src/controller/Page.hx:67: characters 13-18
			throw new HxException($this->Ok("/questionnaire/view/" . ($page->get_chapitre()->get_questionnaire()->id??'null'), "Nouvelle question ajoutée"));
		}
		#src/controller/Page.hx:71: characters 9-22
		$this->view->form = $f;
	}

	/**
	 * @param DbPage $page
	 * 
	 * @return void
	 */
	public function doEdit ($page) {
		#src/controller/Page.hx:18: characters 9-48
		$f = Form::fromSpod($page);
		#src/controller/Page.hx:20: lines 20-25
		if ($f->isValid()) {
			#src/controller/Page.hx:21: characters 13-24
			$page->lock();
			#src/controller/Page.hx:22: characters 13-27
			$f->toSpod($page);
			#src/controller/Page.hx:23: characters 13-26
			$page->update();
			#src/controller/Page.hx:24: characters 13-18
			throw new HxException($this->Ok("/questionnaire/view/" . ($page->get_chapitre()->get_questionnaire()->id??'null'), "Page mise à jour"));
		}
		#src/controller/Page.hx:27: characters 9-22
		$this->view->form = $f;
	}

	/**
	 * @param Question $q
	 * @param DbPage $page
	 * 
	 * @return void
	 */
	public function doEditQuestion ($q, $page) {
		#src/controller/Page.hx:118: characters 9-45
		$this->view->title = "Modifier une question";
		#src/controller/Page.hx:120: characters 9-45
		$f = new Form("modq");
		#src/controller/Page.hx:121: characters 9-100
		$f->addElement(new StringInput("ref", "ID de la question", $q->ref, true));
		#src/controller/Page.hx:122: characters 9-100
		$f->addElement(new StringInput("label", "identifiant court", $q->label, true));
		#src/controller/Page.hx:130: characters 9-101
		$f->addElement(new StringInput("question", "Question", $q->question, true));
		#src/controller/Page.hx:131: characters 9-108
		$f->addElement(new StringInput("description", "Description", $q->description, false));
		#src/controller/Page.hx:132: characters 9-107
		$f->addElement(new Checkbox("required", "Réponse obligatoire", $q->required, false));
		#src/controller/Page.hx:134: lines 134-139
		if ($q->get_type() === QuestionType::QCheckbox()) {
			#src/controller/Page.hx:135: characters 13-158
			$f->addElement(new Html("html", "Question de type 'Case à cocher'. Saisissez les libellés et les valeurs séparés par un \":\""));
			#src/controller/Page.hx:136: characters 13-138
			$f->addElement(new TextArea("data", "Réponses possibles", \QuestionService::getQuestionDataAsText($q), true));
			#src/controller/Page.hx:137: characters 13-61
			$other = ($q->get_data() === null ? false : Boot::dynamicField($q->get_data(), 'other'));
			#src/controller/Page.hx:138: characters 13-102
			$f->addElement(new Checkbox("other", "Champs 'autres'", $other, false));
		}
		#src/controller/Page.hx:140: lines 140-145
		if ($q->get_type() === QuestionType::QRadio()) {
			#src/controller/Page.hx:141: characters 13-165
			$f->addElement(new Html("html", "Question de type 'Liste à choix unique'. Saisissez les libellés et les valeurs séparés par un \":\""));
			#src/controller/Page.hx:142: characters 13-138
			$f->addElement(new TextArea("data", "Réponses possibles", \QuestionService::getQuestionDataAsText($q), true));
			#src/controller/Page.hx:143: characters 13-61
			$other1 = ($q->get_data() === null ? false : Boot::dynamicField($q->get_data(), 'other'));
			#src/controller/Page.hx:144: characters 13-102
			$f->addElement(new Checkbox("other", "Champs 'autres'", $other1, false));
		}
		#src/controller/Page.hx:147: lines 147-159
		if ($f->isValid()) {
			#src/controller/Page.hx:149: characters 13-21
			$q->lock();
			#src/controller/Page.hx:150: characters 13-40
			$q->ref = $f->getValueOf("ref");
			#src/controller/Page.hx:151: characters 13-44
			$q->label = $f->getValueOf("label");
			#src/controller/Page.hx:152: characters 13-50
			$q->question = $f->getValueOf("question");
			#src/controller/Page.hx:153: characters 13-56
			$q->description = $f->getValueOf("description");
			#src/controller/Page.hx:154: characters 13-50
			$q->required = $f->getValueOf("required");
			#src/controller/Page.hx:155: characters 13-55
			\QuestionService::setQuestionDataAsText($f, $q);
			#src/controller/Page.hx:156: characters 13-23
			$q->update();
			#src/controller/Page.hx:158: characters 13-18
			throw new HxException($this->Ok("/questionnaire/view/" . ($page->get_chapitre()->get_questionnaire()->id??'null'), "Question modifiée"));
		}
		#src/controller/Page.hx:161: characters 9-22
		$this->view->form = $f;
	}

	/**
	 * Ajouter une page à un chapitre
	 * 
	 * @param DbChapitre $chapitre
	 * 
	 * @return void
	 */
	public function doInsert ($chapitre) {
		#src/controller/Page.hx:35: characters 9-34
		$page = new DbPage();
		#src/controller/Page.hx:36: characters 9-64
		$page->order = DbPage::$manager->unsafeCount("SELECT COUNT(*) FROM Page WHERE chapitreId = " . (Manager::quoteAny(DbChapitre::$manager->unsafeGetId($chapitre))??'null'));
		#src/controller/Page.hx:37: characters 9-50
		$f = Form::fromSpod($page);
		#src/controller/Page.hx:38: lines 38-43
		if ($f->isValid()) {
			#src/controller/Page.hx:39: characters 13-27
			$f->toSpod($page);
			#src/controller/Page.hx:40: characters 13-37
			$page->set_chapitre($chapitre);
			#src/controller/Page.hx:41: characters 13-26
			$page->insert();
			#src/controller/Page.hx:42: characters 13-18
			throw new HxException($this->Ok("/questionnaire/view/" . ($chapitre->get_questionnaire()->id??'null'), "Nouvelle page créé"));
		}
		#src/controller/Page.hx:44: characters 9-22
		$this->view->form = $f;
	}

	/**
	 * Create a new question
	 * 
	 * @param DbPage $page
	 * 
	 * @return void
	 */
	public function doInsertQuestion ($page) {
		#src/controller/Page.hx:79: characters 9-52
		$this->view->title = "Saisir une nouvelle question";
		#src/controller/Page.hx:81: characters 9-45
		$f = new Form("addq");
		#src/controller/Page.hx:82: characters 9-102
		$f->addElement(new StringInput("ref", "ID de la question", "", true));
		#src/controller/Page.hx:83: characters 9-102
		$f->addElement(new StringInput("label", "identifiant court", "", true));
		#src/controller/Page.hx:84: characters 9-131
		$f->addElement(new StringSelect("type", "Type de question", Question::getTypes(), "QString", true));
		#src/controller/Page.hx:85: characters 9-93
		$f->addElement(new StringInput("question", "Question", "", true));
		#src/controller/Page.hx:86: characters 9-97
		$f->addElement(new StringInput("description", "Description", "", false));
		#src/controller/Page.hx:89: lines 89-111
		if ($f->isValid()) {
			#src/controller/Page.hx:91: characters 12-62
			$q = Question::getByRef($f->getValueOf("ref"));
			#src/controller/Page.hx:92: characters 12-29
			if ($q !== null) {
				#src/controller/Page.hx:92: characters 24-29
				throw new HxException($this->Error("Cet ID de question existe déjà", "/page/insertQuestion/" . ($page->id??'null')));
			}
			#src/controller/Page.hx:94: characters 12-38
			$q1 = new Question();
			#src/controller/Page.hx:95: characters 12-39
			$q1->ref = $f->getValueOf("ref");
			#src/controller/Page.hx:96: characters 12-43
			$q1->label = $f->getValueOf("label");
			#src/controller/Page.hx:97: characters 12-49
			$q1->question = $f->getValueOf("question");
			#src/controller/Page.hx:98: characters 12-55
			$q1->description = $f->getValueOf("description");
			#src/controller/Page.hx:99: characters 12-83
			$q1->set_type(\Type::createEnum(Boot::getClass(QuestionType::class), $f->getValueOf("type")));
			#src/controller/Page.hx:100: characters 12-22
			$q1->insert();
			#src/controller/Page.hx:102: characters 12-43
			$qp = new QuestionPage();
			#src/controller/Page.hx:103: characters 12-27
			$qp->set_question($q1);
			#src/controller/Page.hx:104: characters 12-26
			$qp->set_page($page);
			#src/controller/Page.hx:105: characters 12-67
			$qp->order = QuestionPage::$manager->unsafeCount("SELECT COUNT(*) FROM QuestionPage WHERE pageId = " . (Manager::quoteAny(DbPage::$manager->unsafeGetId($page))??'null')) + 1;
			#src/controller/Page.hx:106: characters 12-23
			$qp->insert();
			#src/controller/Page.hx:109: characters 13-18
			throw new HxException($this->Ok("/questionnaire/view/" . ($page->get_chapitre()->get_questionnaire()->id??'null'), "Nouvelle question créé"));
		}
		#src/controller/Page.hx:113: characters 9-22
		$this->view->form = $f;
	}

	/**
	 * @param Question $q
	 * @param DbPage $page
	 * 
	 * @return void
	 */
	public function doRemoveQuestion ($q, $page) {
		#src/controller/Page.hx:168: characters 9-78
		$qp = QuestionPage::$manager->unsafeObjects("SELECT * FROM QuestionPage WHERE questionId = " . (Manager::quoteAny(Question::$manager->unsafeGetId($q))??'null') . ((" AND pageId = " . (Manager::quoteAny(DbPage::$manager->unsafeGetId($page))??'null'))??'null'), true)->first();
		#src/controller/Page.hx:169: characters 9-20
		$qp->delete();
		#src/controller/Page.hx:170: characters 9-14
		throw new HxException($this->Ok("/questionnaire/view/" . ($page->get_chapitre()->get_questionnaire()->id??'null'), "Question retirée"));
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}

Boot::registerClass(Page::class, 'controller.Page');
Boot::registerMeta(Page::class, new HxAnon([
	"obj" => new HxAnon(["dispatchConfig" => \Array_hx::wrap(["oy14:insertQuestionjy21:haxe.web.DispatchRule:3:1jR1:0:1jy18:haxe.web.MatchRule:7:2y7:db.Pagefy14:removeQuestionjR1:1:1ajR2:7:2y11:db.QuestionfjR2:7:2R3fhy4:editjR1:3:1jR1:0:1jR2:7:2R3fy11:addQuestionjR1:3:1jR1:0:1jR2:7:2R3fy12:editQuestionjR1:3:1jR1:1:1ajR2:7:2R5fjR2:7:2R3fhy6:insertjR1:3:1jR1:0:1jR2:7:2y11:db.Chapitrefy4:filejR1:0:1jR2:3:0g"])]),
	"fields" => new HxAnon([
		"doEdit" => new HxAnon([
			"admin" => null,
			"tpl" => \Array_hx::wrap(["form.twig"]),
		]),
		"doInsert" => new HxAnon([
			"admin" => null,
			"tpl" => \Array_hx::wrap(["form.twig"]),
		]),
		"doAddQuestion" => new HxAnon([
			"admin" => null,
			"tpl" => \Array_hx::wrap(["form.twig"]),
		]),
		"doInsertQuestion" => new HxAnon([
			"admin" => null,
			"tpl" => \Array_hx::wrap(["form.twig"]),
		]),
		"doEditQuestion" => new HxAnon([
			"admin" => null,
			"tpl" => \Array_hx::wrap(["form.twig"]),
		]),
	]),
]));
Page::__hx__init();
