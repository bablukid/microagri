<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace tink\core\_Callback;

use \haxe\Timer;
use \php\Boot;
use \tink\core\Noise;

final class Callback_Impl_ {
	/**
	 * @var int
	 */
	const MAX_DEPTH = 1000;

	/**
	 * @var int
	 */
	static public $depth = 0;

	/**
	 * @param \Closure $f
	 * 
	 * @return \Closure
	 */
	static public function _new ($f) {
		#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:5: character 3
		$this1 = $f;
		return $this1;
	}

	/**
	 * @param \Closure $f
	 * 
	 * @return void
	 */
	static public function defer ($f) {
		#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:49: characters 7-29
		Timer::delay($f, 0);
	}

	/**
	 * @param \Array_hx $callbacks
	 * 
	 * @return \Closure
	 */
	static public function fromMany ($callbacks) {
		#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:30: lines 30-33
		return function ($v)  use (&$callbacks) {
			#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:32: lines 32-33
			$_g = 0;
			while ($_g < $callbacks->length) {
				#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:32: characters 14-22
				$callback = ($callbacks->arr[$_g] ?? null);
				#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:32: lines 32-33
				++$_g;
				#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:33: characters 11-29
				Callback_Impl_::invoke($callback, $v);
			}
		};
	}

	/**
	 * @param \Closure $f
	 * 
	 * @return \Closure
	 */
	static public function fromNiladic ($f) {
		#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:27: characters 5-48
		return function ($_)  use (&$f) {
			#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:27: characters 45-48
			$f();
		};
	}

	/**
	 * @param \Closure $cb
	 * 
	 * @return \Closure
	 */
	static public function ignore ($cb) {
		#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:24: characters 5-41
		return function ($_)  use (&$cb) {
			#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:24: characters 25-41
			Callback_Impl_::invoke($cb, Noise::Noise());
		};
	}

	/**
	 * @param \Closure $this
	 * @param mixed $data
	 * 
	 * @return void
	 */
	static public function invoke ($this1, $data) {
		#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:14: lines 14-19
		if (Callback_Impl_::$depth < 1000) {
			#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:15: characters 7-14
			Callback_Impl_::$depth++;
			#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:16: characters 7-19
			$this1($data);
			#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:17: characters 7-14
			Callback_Impl_::$depth--;
		} else {
			#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:19: characters 25-31
			$_e = $this1;
			#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:19: characters 25-36
			$f = function ($data1)  use (&$_e) {
				#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:19: characters 25-31
				Callback_Impl_::invoke($_e, $data1);
			};
			#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:19: characters 25-36
			$data2 = $data;
			#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:19: characters 10-43
			Callback_Impl_::defer(function ()  use (&$f, &$data2) {
				#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:19: characters 25-36
				$f($data2);
			});
		}
	}

	/**
	 * @param \Closure $this
	 * 
	 * @return \Closure
	 */
	static public function toFunction ($this1) {
		#/home/bubar/haxe/haxe_libraries/tink_core/1.21.0/haxelib/src/tink/core/Callback.hx:9: characters 5-16
		return $this1;
	}
}

Boot::registerClass(Callback_Impl_::class, 'tink.core._Callback.Callback_Impl_');
