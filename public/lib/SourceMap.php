<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Json;
use \php\_Boot\HxString;
use \php\_Boot\HxException;

class SourceMap {
	/**
	 * @var string
	 * File with the generated code that this source map is associated with.
	 */
	public $file;
	/**
	 * @var \Array_hx
	 * Decoded mappings data
	 */
	public $mappings;
	/**
	 * @var \Array_hx
	 * A list of symbol names used in `mappings`
	 */
	public $names;
	/**
	 * @var string
	 * This value is prepended to the individual entries in the `sources` field.
	 */
	public $sourceRoot;
	/**
	 * @var \Array_hx
	 * A list of original source files.
	 */
	public $sources;
	/**
	 * @var \Array_hx
	 * A list of contents of files mentioned in `sources` if those files cannot be hosted.
	 */
	public $sourcesContent;
	/**
	 * @var int
	 * Specification version. The only supported version is 3.
	 */
	public $version;

	/**
	 *  Create a source map parser.
	 *  @param sourceMapData - Raw data from a source map file. This parser does not validate it.
	 * 							So it's your responsibility to provide correct data.
	 * 
	 * @param string $sourceMapData
	 * 
	 * @return void
	 */
	public function __construct ($sourceMapData) {
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:23: characters 41-43
		$this->mappings = new \Array_hx();
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:14: characters 50-52
		$this->sourceRoot = "";
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:10: characters 44-45
		$this->version = 3;
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:31: characters 3-23
		$this->parse($sourceMapData);
	}

	/**
	 * Invoke `callback` for each mapped position.
	 * 
	 * @param \Closure $callback
	 * 
	 * @return void
	 */
	public function eachMapping ($callback) {
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:58: lines 58-62
		$_g = 0;
		$_g1 = $this->mappings->length;
		while ($_g < $_g1) {
			$line = $_g++;
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:59: lines 59-61
			$_g2 = 0;
			$_g11 = ($this->mappings->arr[$line] ?? null);
			while ($_g2 < $_g11->length) {
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:59: characters 9-16
				$mapping = ($_g11->arr[$_g2] ?? null);
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:59: lines 59-61
				++$_g2;
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:60: characters 14-50
				$pos = new HxAnon([
					"generatedLine" => $line + 1,
					"generatedColumn" => ($mapping->arr[0] ?? null),
				]);
				if ($mapping->length > 1) {
					$pos->originalLine = ($mapping->arr[2] ?? null) + 1;
					$pos->originalColumn = ($mapping->arr[3] ?? null);
					$pos->source = ($this->sourceRoot??'null') . (($this->sources->arr[($mapping->arr[1] ?? null)] ?? null)??'null');
					if ($mapping->length > 4) {
						$pos->name = ($this->names->arr[($mapping->arr[4] ?? null)] ?? null);
					}
				}
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:60: characters 5-51
				$callback($pos);
			}

		}
	}

	/**
	 * Get position in original source file.
	 * Returns `null` if provided `line` and/or `column` don't exist in compiled file.
	 * @param line - `1`-based line number in generated file.
	 * @param column - zero-based column number in generated file.
	 * 
	 * @param int $line
	 * @param int $column
	 * 
	 * @return object
	 */
	public function originalPositionFor ($line, $column = 0) {
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:40: lines 40-52
		if ($column === null) {
			$column = 0;
		}
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:41: characters 3-54
		if (($line < 1) || ($line > $this->mappings->length)) {
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:41: characters 43-54
			return null;
		}
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:43: characters 3-30
		$pos = null;
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:44: lines 44-49
		$_g = 0;
		$_g1 = ($this->mappings->arr[$line - 1] ?? null);
		while ($_g < $_g1->length) {
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:44: characters 8-15
			$mapping = ($_g1->arr[$_g] ?? null);
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:44: lines 44-49
			++$_g;
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:45: lines 45-48
			if (($mapping->arr[0] ?? null) <= $column) {
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:46: characters 11-43
				$pos1 = new HxAnon([
					"generatedLine" => $line,
					"generatedColumn" => ($mapping->arr[0] ?? null),
				]);
				if ($mapping->length > 1) {
					$pos1->originalLine = ($mapping->arr[2] ?? null) + 1;
					$pos1->originalColumn = ($mapping->arr[3] ?? null);
					$pos1->source = ($this->sourceRoot??'null') . (($this->sources->arr[($mapping->arr[1] ?? null)] ?? null)??'null');
					if ($mapping->length > 4) {
						$pos1->name = ($this->names->arr[($mapping->arr[4] ?? null)] ?? null);
					}
				}
				$pos = $pos1;
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:47: characters 5-10
				break;
			}
		}

		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:51: characters 3-13
		return $pos;
	}

	/**
	 * Parse raw source map data
	 * @param json - Raw content of source map file
	 * 
	 * @param string $json
	 * 
	 * @return void
	 */
	public function parse ($json) {
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:70: characters 3-38
		$data = Json::phpJsonDecode($json);
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:71: characters 3-26
		if ($data === null) {
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:71: characters 21-26
			throw new HxException("Failed to parse source map data.");
		}
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:73: characters 3-25
		$this->version = $data->version;
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:74: characters 3-19
		$this->file = $data->file;
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:75: characters 3-64
		$this->sourceRoot = ($data->sourceRoot === null ? "" : $data->sourceRoot);
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:76: characters 3-25
		$this->sources = $data->sources;
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:77: characters 3-76
		$this->sourcesContent = ($data->sourcesContent === null ? new \Array_hx() : $data->sourcesContent);
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:78: characters 3-21
		$this->names = $data->names;
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:80: characters 3-42
		$encoded = HxString::split($data->mappings, ";");
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:82: characters 3-38
		$this->mappings[$encoded->length - 1] = null;
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:84: characters 3-26
		$previousSource = 0;
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:85: characters 3-24
		$previousLine = 0;
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:86: characters 3-26
		$previousColumn = 0;
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:87: characters 3-24
		$previousName = 0;
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:89: lines 89-116
		$_g = 0;
		$_g1 = $encoded->length;
		while ($_g < $_g1) {
			$l = $_g++;
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:90: characters 4-20
			$this->mappings[$l] = new \Array_hx();
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:91: characters 4-40
			if (mb_strlen(($encoded->arr[$l] ?? null)) === 0) {
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:91: characters 32-40
				continue;
			}
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:93: characters 4-36
			$previousGeneratedColumn = 0;
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:95: characters 4-41
			$segments = HxString::split(($encoded->arr[$l] ?? null), ",");
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:96: characters 4-43
			$this->mappings[$l][$segments->length - 1] = null;
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:98: lines 98-115
			$_g2 = 0;
			$_g11 = $segments->length;
			while ($_g2 < $_g11) {
				$s = $_g2++;
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:99: characters 19-39
				$vlq = ($segments->arr[$s] ?? null);
				$data1 = \Array_hx::wrap([
					0,
					0,
					0,
					0,
				]);
				$index = -1;
				$_g3 = 0;
				$_g12 = $data1->length;
				while ($_g3 < $_g12) {
					$i = $_g3++;
					$value = 0;
					$shift = 0;
					$digit = null;
					$masked = null;
					while (true) {
						$charCode = \StringTools::fastCodeAt($vlq, ++$index);
						$digit = (97 <= $charCode ? $charCode - 97 + 26 : (65 <= $charCode ? $charCode - 65 : (48 <= $charCode ? $charCode - 48 + 52 : ($charCode === 43 ? 62 : 63))));
						$masked = $digit & 31;
						$value += $masked << $shift;
						$shift += 5;
						if (!($digit !== $masked)) {
							break;
						}
					}
					$data1[$i] = (($value & 1) === 1 ? -($value >> 1) : $value >> 1);
				}

				$this1 = $data1;
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:99: characters 5-40
				$mapping = $this1;
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:100: characters 5-29
				$this->mappings[$l][$s] = $mapping;
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:101: characters 5-59
				$mapping[0] += $previousGeneratedColumn;
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:102: lines 102-113
				if ($mapping->length > 1) {
					#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:103: characters 6-42
					$mapping[1] += $previousSource;
					#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:104: characters 6-38
					$mapping[2] += $previousLine;
					#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:105: characters 6-42
					$mapping[3] += $previousColumn;
					#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:106: lines 106-109
					if ($mapping->length > 4) {
						#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:107: characters 7-39
						$mapping[4] += $previousName;
						#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:108: characters 7-34
						$previousName = ($mapping->arr[4] ?? null);
					}
					#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:110: characters 6-33
					$previousLine = ($mapping->arr[2] ?? null);
					#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:111: characters 6-37
					$previousSource = ($mapping->arr[1] ?? null);
					#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:112: characters 6-37
					$previousColumn = ($mapping->arr[3] ?? null);
				}
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/SourceMap.hx:114: characters 5-54
				$previousGeneratedColumn = ($mapping->arr[0] ?? null);
			}

		}

	}
}

Boot::registerClass(SourceMap::class, 'SourceMap');
