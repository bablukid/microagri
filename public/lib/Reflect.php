<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

use \php\Boot;
use \php\_Boot\HxClass;
use \php\_Boot\HxClosure;

/**
 * The Reflect API is a way to manipulate values dynamically through an
 * abstract interface in an untyped manner. Use with care.
 * @see https://haxe.org/manual/std-reflection.html
 */
class Reflect {
	/**
	 * Call a method `func` with the given arguments `args`.
	 * The object `o` is ignored in most cases. It serves as the `this`-context in the following
	 * situations:
	 * (neko) Allows switching the context to `o` in all cases.
	 * (macro) Same as neko for Haxe 3. No context switching in Haxe 4.
	 * (js, lua) Require the `o` argument if `func` does not, but should have a context.
	 * This can occur by accessing a function field natively, e.g. through `Reflect.field`
	 * or by using `(object : Dynamic).field`. However, if `func` has a context, `o` is
	 * ignored like on other targets.
	 * 
	 * @param mixed $o
	 * @param mixed $func
	 * @param \Array_hx $args
	 * 
	 * @return mixed
	 */
	static public function callMethod ($o, $func, $args) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:103: characters 3-69
		return call_user_func_array($func, $args->arr);
	}

	/**
	 * Compares the functions `f1` and `f2`.
	 * If `f1` or `f2` are null, the result is false.
	 * If `f1` or `f2` are not functions, the result is unspecified.
	 * Otherwise the result is true if `f1` and the `f2` are physically equal,
	 * false otherwise.
	 * If `f1` or `f2` are member method closures, the result is true if they
	 * are closures of the same method on the same object value, false otherwise.
	 * 
	 * @param mixed $f1
	 * @param mixed $f2
	 * 
	 * @return bool
	 */
	static public function compareMethods ($f1, $f2) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:127: lines 127-131
		if (($f1 instanceof HxClosure) && ($f2 instanceof HxClosure)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:128: characters 4-24
			return $f1->equals($f2);
		} else {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:130: characters 4-19
			return Boot::equal($f1, $f2);
		}
	}

	/**
	 * Removes the field named `field` from structure `o`.
	 * This method is only guaranteed to work on anonymous structures.
	 * If `o` or `field` are null, the result is unspecified.
	 * 
	 * @param mixed $o
	 * @param string $field
	 * 
	 * @return bool
	 */
	static public function deleteField ($o, $field) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:147: lines 147-152
		if (Reflect::hasField($o, $field)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:148: characters 30-31
			$tmp = $o;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:148: characters 4-40
			unset($tmp->{$field});
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:149: characters 4-15
			return true;
		} else {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:151: characters 4-16
			return false;
		}
	}

	/**
	 * Returns the value of the field named `field` on object `o`.
	 * If `o` is not an object or has no field named `field`, the result is
	 * null.
	 * If the field is defined as a property, its accessors are ignored. Refer
	 * to `Reflect.getProperty` for a function supporting property accessors.
	 * If `field` is null, the result is unspecified.
	 * (As3) If used on a property field, the getter will be invoked. It is
	 * not possible to obtain the value directly.
	 * 
	 * @param mixed $o
	 * @param string $field
	 * 
	 * @return mixed
	 */
	static public function field ($o, $field) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:45: lines 45-47
		if (is_string($o)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:46: characters 24-45
			$tmp = Boot::dynamicString($o);
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:46: characters 4-53
			return $tmp->{$field};
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:48: characters 3-34
		if (!is_object($o)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:48: characters 23-34
			return null;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:50: lines 50-52
		if (property_exists($o, $field)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:51: characters 24-25
			$tmp1 = $o;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:51: characters 4-33
			return $tmp1->{$field};
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:53: lines 53-55
		if (method_exists($o, $field)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:54: characters 4-44
			return Boot::getInstanceClosure($o, $field);
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:57: lines 57-68
		if (($o instanceof HxClass)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:58: characters 4-54
			$phpClassName = $o->phpClassName;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:59: lines 59-61
			if (defined("" . ($phpClassName??'null') . "::" . ($field??'null'))) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:60: characters 5-52
				return constant("" . ($phpClassName??'null') . "::" . ($field??'null'));
			}
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:62: lines 62-64
			if (property_exists($phpClassName, $field)) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:63: characters 25-26
				$tmp2 = $o;
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:63: characters 5-34
				return $tmp2->{$field};
			}
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:65: lines 65-67
			if (method_exists($phpClassName, $field)) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:66: characters 5-54
				return Boot::getStaticClosure($phpClassName, $field);
			}
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:70: characters 3-14
		return null;
	}

	/**
	 * Returns the fields of structure `o`.
	 * This method is only guaranteed to work on anonymous structures. Refer to
	 * `Type.getInstanceFields` for a function supporting class instances.
	 * If `o` is null, the result is unspecified.
	 * 
	 * @param mixed $o
	 * 
	 * @return \Array_hx
	 */
	static public function fields ($o) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:107: lines 107-109
		if (is_object($o)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:108: characters 4-77
			return \Array_hx::wrap(array_keys(get_object_vars($o)));
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:110: characters 3-12
		return new \Array_hx();
	}

	/**
	 * Returns the value of the field named `field` on object `o`, taking
	 * property getter functions into account.
	 * If the field is not a property, this function behaves like
	 * `Reflect.field`, but might be slower.
	 * If `o` or `field` are null, the result is unspecified.
	 * 
	 * @param mixed $o
	 * @param string $field
	 * 
	 * @return mixed
	 */
	static public function getProperty ($o, $field) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:78: lines 78-87
		if (is_object($o)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:79: lines 79-86
			if (($o instanceof HxClass)) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:80: characters 5-55
				$phpClassName = $o->phpClassName;
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:81: lines 81-83
				if (Boot::hasGetter($phpClassName, $field)) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:82: characters 31-43
					$tmp = $phpClassName;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:82: characters 6-58
					return $tmp::{"get_" . ($field??'null')}();
				}
			} else if (Boot::hasGetter(get_class($o), $field)) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:85: characters 24-25
				$tmp1 = $o;
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:85: characters 5-40
				return $tmp1->{"get_" . ($field??'null')}();
			}
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:89: characters 3-33
		return Reflect::field($o, $field);
	}

	/**
	 * Tells if structure `o` has a field named `field`.
	 * This is only guaranteed to work for anonymous structures. Refer to
	 * `Type.getInstanceFields` for a function supporting class instances.
	 * If `o` or `field` are null, the result is unspecified.
	 * 
	 * @param mixed $o
	 * @param string $field
	 * 
	 * @return bool
	 */
	static public function hasField ($o, $field) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:33: characters 3-35
		if (!is_object($o)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:33: characters 23-35
			return false;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:34: characters 3-44
		if (property_exists($o, $field)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:34: characters 33-44
			return true;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:36: lines 36-39
		if (($o instanceof HxClass)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:37: characters 4-54
			$phpClassName = $o->phpClassName;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:38: characters 11-142
			if (!(property_exists($phpClassName, $field) || method_exists($phpClassName, $field))) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:38: characters 103-142
				return defined("" . ($phpClassName??'null') . "::" . ($field??'null'));
			} else {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:38: characters 11-142
				return true;
			}
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:41: characters 3-15
		return false;
	}

	/**
	 * Sets the field named `field` of object `o` to value `value`.
	 * If `o` has no field named `field`, this function is only guaranteed to
	 * work for anonymous structures.
	 * If `o` or `field` are null, the result is unspecified.
	 * (As3) If used on a property field, the setter will be invoked. It is
	 * not possible to set the value directly.
	 * 
	 * @param mixed $o
	 * @param string $field
	 * @param mixed $value
	 * 
	 * @return void
	 */
	static public function setField ($o, $field, $value) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:74: characters 19-20
		$tmp = $o;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:74: characters 3-35
		$tmp->{$field} = $value;
	}

	/**
	 * Sets the field named `field` of object `o` to value `value`, taking
	 * property setter functions into account.
	 * If the field is not a property, this function behaves like
	 * `Reflect.setField`, but might be slower.
	 * If `field` is null, the result is unspecified.
	 * 
	 * @param mixed $o
	 * @param string $field
	 * @param mixed $value
	 * 
	 * @return void
	 */
	static public function setProperty ($o, $field, $value) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:93: lines 93-99
		if (is_object($o)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:94: lines 94-98
			if (Boot::hasSetter(get_class($o), $field)) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:95: characters 17-18
				$tmp = $o;
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:95: characters 5-40
				$tmp->{"set_" . ($field??'null')}($value);
			} else {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:97: characters 21-22
				$tmp1 = $o;
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Reflect.hx:97: characters 5-37
				$tmp1->{$field} = $value;
			}
		}
	}
}

Boot::registerClass(Reflect::class, 'Reflect');
