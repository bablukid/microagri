<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

use \sugoi\form\elements\IntInput;
use \php\_Boot\HxDynamicStr;
use \sugoi\form\elements\Submit;
use \php\_Boot\HxAnon;
use \db\Chapitre as DbChapitre;
use \php\Boot;
use \sugoi\form\elements\TextArea;
use \form\CheckboxesWithField;
use \db\Question;
use \sugoi\form\elements\StringInput;
use \sugoi\form\elements\CheckboxGroup;
use \db\QuestionType;
use \form\Checkboxes;
use \db\Answer;
use \php\_Boot\HxString;
use \sugoi\form\elements\FloatInput;
use \db\Questionnaire;
use \php\_Boot\HxException;
use \form\MultiInput;
use \sugoi\form\elements\RadioGroup;
use \sugoi\form\Form;
use \db\User;

class QuestionService {
	/**
	 * @param DbChapitre $chapter
	 * @param User $user
	 * @param int $dataset
	 * 
	 * @return object
	 */
	static public function getChapterCompletion ($chapter, $user, $dataset) {
		#src/QuestionService.hx:219: characters 9-45
		$out = new HxAnon([
			"num" => 0,
			"total" => 0,
			"percent" => 0,
		]);
		#src/QuestionService.hx:221: lines 221-228
		$_g = 0;
		$_g1 = $chapter->getPages();
		while ($_g < $_g1->length) {
			#src/QuestionService.hx:221: characters 14-15
			$p = ($_g1->arr[$_g] ?? null);
			#src/QuestionService.hx:221: lines 221-228
			++$_g;
			#src/QuestionService.hx:222: lines 222-227
			$_g2 = 0;
			$_g11 = $p->getQuestions();
			while ($_g2 < $_g11->length) {
				#src/QuestionService.hx:222: characters 18-19
				$q = ($_g11->arr[$_g2] ?? null);
				#src/QuestionService.hx:222: lines 222-227
				++$_g2;
				#src/QuestionService.hx:223: characters 17-56
				if (HxString::indexOf($q->label, "_cmt") > -1) {
					#src/QuestionService.hx:223: characters 48-56
					continue;
				}
				#src/QuestionService.hx:224: characters 17-28
				$out->total++;
				#src/QuestionService.hx:225: characters 17-60
				$answer = Answer::get($user, $q, $dataset);
				#src/QuestionService.hx:226: characters 17-67
				if (($answer !== null) && ($answer->answer !== null)) {
					#src/QuestionService.hx:226: characters 58-67
					$out->num++;
				}
			}

		}

		#src/QuestionService.hx:229: characters 9-56
		$out->percent = (int)(floor($out->num / $out->total * 100 + 0.5));
		#src/QuestionService.hx:230: characters 9-19
		return $out;
	}

	/**
	 * @param Questionnaire $questionnaire
	 * @param User $user
	 * @param int $dataset
	 * 
	 * @return object
	 */
	static public function getCompletion ($questionnaire, $user, $dataset) {
		#src/QuestionService.hx:11: characters 9-45
		$out = new HxAnon([
			"num" => 0,
			"total" => 0,
			"percent" => 0,
		]);
		#src/QuestionService.hx:13: lines 13-21
		$_g = 0;
		$_g1 = $questionnaire->getAllQuestions();
		while ($_g < $_g1->length) {
			#src/QuestionService.hx:13: characters 14-15
			$q = ($_g1->arr[$_g] ?? null);
			#src/QuestionService.hx:13: lines 13-21
			++$_g;
			#src/QuestionService.hx:16: characters 13-52
			if (HxString::indexOf($q->label, "_cmt") > -1) {
				#src/QuestionService.hx:16: characters 44-52
				continue;
			}
			#src/QuestionService.hx:17: characters 13-24
			$out->total++;
			#src/QuestionService.hx:18: characters 13-56
			$answer = Answer::get($user, $q, $dataset);
			#src/QuestionService.hx:19: characters 13-63
			if (($answer !== null) && ($answer->answer !== null)) {
				#src/QuestionService.hx:19: characters 54-63
				$out->num++;
			}
		}

		#src/QuestionService.hx:22: characters 9-56
		$out->percent = (int)(floor($out->num / $out->total * 100 + 0.5));
		#src/QuestionService.hx:23: characters 9-19
		return $out;
	}

	/**
	 *  Get a question from its ID
	 * 
	 * @param \Array_hx $questions
	 * @param int $subAnswerIndex
	 * 
	 * @return Form
	 */
	static public function getForm ($questions, $subAnswerIndex = null) {
		#src/QuestionService.hx:44: characters 9-45
		$form1 = new Form("q");
		#src/QuestionService.hx:47: lines 47-65
		$form1->toString = function ()  use (&$form1) {
			#src/QuestionService.hx:48: characters 13-47
			$s = new \StringBuf();
			#src/QuestionService.hx:49: characters 13-37
			$s->add($form1->getOpenTag());
			#src/QuestionService.hx:50: characters 13-60
			if ($form1->isSubmitted()) {
				#src/QuestionService.hx:50: characters 37-60
				$s->add($form1->getErrors());
			}
			#src/QuestionService.hx:52: lines 52-57
			$_g = 0;
			$_g1 = $form1->getElements();
			while ($_g < $_g1->length) {
				#src/QuestionService.hx:52: characters 19-26
				$element = ($_g1->arr[$_g] ?? null);
				#src/QuestionService.hx:52: lines 52-57
				++$_g;
				#src/QuestionService.hx:53: lines 53-56
				if (($element !== $form1->submitButton) && ($element->internal === false)) {
					#src/QuestionService.hx:54: characters 21-121
					$s->add("<div class='row' style='margin-bottom:12px'><div class='col-md-6'>" . ($element->label??'null') . "</div>\x0A");
					#src/QuestionService.hx:55: characters 21-91
					$s->add("<div class='col-md-6'>" . ($element->render()??'null') . "</div></div><hr/>\x0A");
				}
			}

			#src/QuestionService.hx:60: characters 13-85
			$form1->submitButton = new Submit("submit", "Valider");
			#src/QuestionService.hx:61: characters 13-48
			$form1->submitButton->parentForm = $form1;
			#src/QuestionService.hx:62: characters 13-111
			$s->add("<div style='margin-top:8px;' class='text-center'>" . ($form1->submitButton->render()??'null') . "</div>");
			#src/QuestionService.hx:63: characters 13-40
			$s->add($form1->getCloseTag());
			#src/QuestionService.hx:64: characters 13-32
			return $s->b;
		};
		#src/QuestionService.hx:67: characters 9-41
		\Hooks::beforeFormBuild($questions);
		#src/QuestionService.hx:69: lines 69-162
		$_g2 = 0;
		while ($_g2 < $questions->length) {
			#src/QuestionService.hx:69: characters 14-15
			$q = ($questions->arr[$_g2] ?? null);
			#src/QuestionService.hx:69: lines 69-162
			++$_g2;
			#src/QuestionService.hx:72: characters 13-108
			$html = "<h4><span class='qid'>" . ($q->ref??'null') . "</span>" . ($q->question??'null') . "</h4><p>" . ($q->description??'null') . "</p>";
			#src/QuestionService.hx:73: characters 13-68
			$answer = Answer::getOrCreate(\App::$current->user, $q);
			#src/QuestionService.hx:75: characters 13-48
			$value = $answer->answer;
			#src/QuestionService.hx:76: characters 13-54
			if (($value === "null") || ($value === "")) {
				#src/QuestionService.hx:76: characters 42-54
				$value = null;
			}
			#src/QuestionService.hx:79: lines 79-85
			if ((\App::$current->session->data !== null) && (Boot::dynamicField(\App::$current->session->data, 'respIndex') !== null) && (HxString::indexOf(\Std::string($value), "|") > -1)) {
				#src/QuestionService.hx:80: characters 17-99
				$x = (HxString::split(\Std::string($value), "|")->arr[Boot::dynamicField(\App::$current->session->data, 'respIndex')] ?? null);
				#src/QuestionService.hx:81: lines 81-83
				if (($x === null) || ($x === "null")) {
					#src/QuestionService.hx:82: characters 21-27
					$x = "";
				}
				#src/QuestionService.hx:84: characters 17-26
				$value = $x;
			}
			#src/QuestionService.hx:87: characters 13-60
			$e = null;
			#src/QuestionService.hx:89: characters 20-26
			$__hx__switch = ($q->get_type()->index);
			if ($__hx__switch === 0) {
				#src/QuestionService.hx:91: characters 17-76
				$e = new TextArea($q->ref, $html, $value, true);
			} else if ($__hx__switch === 1 || $__hx__switch === 4) {
				#src/QuestionService.hx:153: characters 17-85
				$e = new StringInput($q->ref, $html, $value, $q->required);
			} else if ($__hx__switch === 2) {
				#src/QuestionService.hx:119: characters 17-76
				$e = new IntInput($q->ref, $html, $value, true);
			} else if ($__hx__switch === 3) {
				#src/QuestionService.hx:121: characters 17-78
				$e = new FloatInput($q->ref, $html, $value, true);
			} else if ($__hx__switch === 5) {
				#src/QuestionService.hx:111: lines 111-116
				if ($q->get_data() !== null) {
					#src/QuestionService.hx:112: characters 21-73
					$d = $q->get_data();
					#src/QuestionService.hx:113: characters 21-94
					$e = new RadioGroup($q->ref, $html, $d->list, $value, null, null);
				} else {
					#src/QuestionService.hx:115: characters 21-92
					$e = new RadioGroup($q->ref, $html, null, $value, null, null);
				}
			} else if ($__hx__switch === 6) {
				#src/QuestionService.hx:94: characters 17-93
				$d1 = $q->get_data();
				#src/QuestionService.hx:96: characters 17-57
				if ($value !== null) {
					#src/QuestionService.hx:96: characters 33-57
					$value = QuestionService::split($value, "~");
				}
				#src/QuestionService.hx:98: lines 98-108
				if ($d1->extras !== null) {
					#src/QuestionService.hx:100: characters 21-88
					$e = new CheckboxesWithField($q->ref, $html, $d1->list, $value, null, null);
					#src/QuestionService.hx:101: characters 29-53
					$e->extraFields = $d1->extras;
				} else if ($d1->other) {
					#src/QuestionService.hx:104: characters 25-83
					$e = new Checkboxes($q->ref, $html, $d1->list, $value, null, null);
				} else {
					#src/QuestionService.hx:106: characters 25-101
					$e = new CheckboxGroup($q->ref, $html, $d1->list, $value, null, null);
				}
			} else if ($__hx__switch === 7) {
				#src/QuestionService.hx:124: characters 17-84
				$data = \Array_hx::wrap([
					new HxAnon([
						"label" => "Oui",
						"value" => "OUI",
					]),
					new HxAnon([
						"label" => "Non",
						"value" => "NON",
					]),
				]);
				#src/QuestionService.hx:125: characters 17-88
				$e = new RadioGroup($q->ref, $html, $data, $value, null, null);
				#src/QuestionService.hx:126: characters 25-43
				$e->vertical = false;
			} else if ($__hx__switch === 8) {
				#src/QuestionService.hx:129: characters 17-63
				$data1 = $q->get_data();
				#src/QuestionService.hx:130: characters 17-32
				$lines = new \Array_hx();
				#src/QuestionService.hx:145: lines 145-147
				if ($q->ref === "E1-4") {
					#src/QuestionService.hx:146: characters 39-64
					$lines->arr[$lines->length] = "Bâtiment " . 1;
					++$lines->length;

					$lines->arr[$lines->length] = "Bâtiment " . 2;
					++$lines->length;

					$lines->arr[$lines->length] = "Bâtiment " . 3;
					++$lines->length;

					$lines->arr[$lines->length] = "Bâtiment " . 4;
					++$lines->length;

					$lines->arr[$lines->length] = "Bâtiment " . 5;
					++$lines->length;

					$lines->arr[$lines->length] = "Bâtiment " . 6;
					++$lines->length;

					$lines->arr[$lines->length] = "Bâtiment " . 7;
					++$lines->length;

					$lines->arr[$lines->length] = "Bâtiment " . 8;
					++$lines->length;

					$lines->arr[$lines->length] = "Bâtiment " . 9;
					++$lines->length;

					$lines->arr[$lines->length] = "Bâtiment " . 10;
					++$lines->length;

				}
				#src/QuestionService.hx:149: characters 52-106
				$_this = QuestionService::split($value, "~");
				$result = [];
				$collection = $_this->arr;
				foreach ($collection as $key => $value1) {
					$result[] = QuestionService::split($value1, ";");
				}

				#src/QuestionService.hx:149: characters 17-107
				$values = \Array_hx::wrap($result);
				#src/QuestionService.hx:150: characters 17-77
				$e = new MultiInput($q->ref, $html, $lines, $data1->extras, $values);
			}
			#src/QuestionService.hx:158: characters 13-36
			$e->required = $q->required;
			#src/QuestionService.hx:160: characters 13-31
			$form1->addElement($e);
		}

		#src/QuestionService.hx:164: characters 9-20
		return $form1;
	}

	/**
	 * Get next Page
	 * 
	 * @param Questionnaire $questionnaire
	 * @param int $chapitreIndex
	 * @param int $pageIndex
	 * 
	 * @return string
	 */
	static public function getNextPageURL ($questionnaire, $chapitreIndex, $pageIndex) {
		#src/QuestionService.hx:184: characters 9-68
		$chapitre = ($questionnaire->getChapitres()->arr[$chapitreIndex] ?? null);
		#src/QuestionService.hx:185: lines 185-198
		if (($chapitre->getPages()->arr[$pageIndex + 1] ?? null) !== null) {
			#src/QuestionService.hx:188: characters 13-76
			return "/q/" . ($questionnaire->id??'null') . "/" . ($chapitreIndex??'null') . "/" . (($pageIndex + 1)??'null');
		} else {
			#src/QuestionService.hx:191: characters 13-74
			$chapitre1 = ($questionnaire->getChapitres()->arr[$chapitreIndex + 1] ?? null);
			#src/QuestionService.hx:192: lines 192-197
			if ($chapitre1 !== null) {
				#src/QuestionService.hx:193: characters 17-69
				return "/q/" . ($questionnaire->id??'null') . "/" . (($chapitreIndex + 1)??'null') . "/0";
			} else {
				#src/QuestionService.hx:196: characters 17-47
				return $questionnaire->endScreen;
			}
		}
	}

	/**
	 * @param Questionnaire $questionnaire
	 * @param int $chapitreIndex
	 * @param int $pageIndex
	 * 
	 * @return string
	 */
	static public function getPreviousPageURL ($questionnaire, $chapitreIndex, $pageIndex) {
		#src/QuestionService.hx:204: characters 9-68
		$chapitre = ($questionnaire->getChapitres()->arr[$chapitreIndex] ?? null);
		#src/QuestionService.hx:205: lines 205-213
		if ($pageIndex === 0) {
			#src/QuestionService.hx:206: lines 206-210
			if ($chapitreIndex === 0) {
				#src/QuestionService.hx:207: characters 17-49
				return $questionnaire->startScreen;
			} else {
				#src/QuestionService.hx:209: characters 17-69
				return "/q/" . ($questionnaire->id??'null') . "/" . (($chapitreIndex - 1)??'null') . "/0";
			}
		} else {
			#src/QuestionService.hx:212: characters 13-76
			return "/q/" . ($questionnaire->id??'null') . "/" . ($chapitreIndex??'null') . "/" . (($pageIndex - 1)??'null');
		}
	}

	/**
	 * To edit question content
	 * 
	 * @param Question $q
	 * 
	 * @return string
	 */
	static public function getQuestionDataAsText ($q) {
		#src/QuestionService.hx:269: characters 23-29
		$_g = $q->get_type();
		#src/QuestionService.hx:269: lines 269-283
		if ($_g === null) {
			#src/QuestionService.hx:283: characters 23-25
			return "";
		} else {
			#src/QuestionService.hx:269: characters 23-29
			$__hx__switch = ($_g->index);
			if ($__hx__switch === 5 || $__hx__switch === 6) {
				#src/QuestionService.hx:271: characters 17-30
				$out = "";
				#src/QuestionService.hx:272: lines 272-281
				if ($q->get_data() !== null) {
					#src/QuestionService.hx:273: characters 21-73
					$d = $q->get_data();
					#src/QuestionService.hx:274: characters 27-77
					$_this = $d->list;
					$result = [];
					$collection = $_this->arr;
					foreach ($collection as $key => $value) {
						$result[] = (($value->label??'null') . ":" . ($value->value??'null'));
					}

					#src/QuestionService.hx:274: characters 21-88
					$out = \Array_hx::wrap($result)->join("\x0A");
					#src/QuestionService.hx:277: lines 277-280
					if (($q->get_type() === QuestionType::QCheckbox()) && (Boot::dynamicField($q->get_data(), 'extras') !== null)) {
						#src/QuestionService.hx:278: characters 25-44
						$out = ($out??'null') . "\x0AEXTRAS\x0A";
						#src/QuestionService.hx:279: characters 25-100
						$out = ($out??'null') . (\Std::string(Boot::dynamicField($q->get_data(), 'extras')->map(function ($x) {
							#src/QuestionService.hx:279: characters 62-88
							return ($x->label??'null') . ":" . ($x->value??'null');
						})->join("\x0A"))??'null');
					}
				}
				#src/QuestionService.hx:282: characters 17-20
				return $out;
			} else {
				#src/QuestionService.hx:283: characters 23-25
				return "";
			}
		}
	}

	/**
	 * @param \Array_hx $arr
	 * @param string $sep
	 * 
	 * @return string
	 */
	static public function join ($arr, $sep) {
		#src/QuestionService.hx:241: characters 9-32
		if ($arr === null) {
			#src/QuestionService.hx:241: characters 23-32
			return "";
		}
		#src/QuestionService.hx:242: characters 9-80
		return \Lambda::filter($arr, function ($x) {
			#src/QuestionService.hx:242: characters 54-68
			if ($x !== null) {
				#src/QuestionService.hx:242: characters 63-68
				return $x !== "";
			} else {
				#src/QuestionService.hx:242: characters 54-68
				return false;
			}
		})->join($sep);
	}

	/**
	 *  serialize form element value depending on type
	 * 
	 * @param mixed $value
	 * @param QuestionType $type
	 * 
	 * @return string
	 */
	static public function serialize ($value, $type) {
		#src/QuestionService.hx:250: lines 250-261
		$__hx__switch = ($type->index);
		if ($__hx__switch === 6) {
			#src/QuestionService.hx:258: characters 13-35
			return QuestionService::join($value, "~");
		} else if ($__hx__switch === 8) {
			#src/QuestionService.hx:252: characters 13-53
			$curr = $value;
			#src/QuestionService.hx:253: characters 13-94
			$curr2 = \Lambda::map($curr, function ($a) {
				#src/QuestionService.hx:253: characters 74-92
				return QuestionService::join($a, ";");
			});
			#src/QuestionService.hx:254: characters 13-41
			$curr21 = QuestionService::join($curr2, "~");
			#src/QuestionService.hx:255: characters 13-25
			return $curr21;
		} else {
			#src/QuestionService.hx:260: characters 22-46
			return \Std::string($value);
		}
	}

	/**
	 * @param Form $form
	 * @param Question $q
	 * 
	 * @return void
	 */
	static public function setQuestionDataAsText ($form, $q) {
		#src/QuestionService.hx:288: characters 16-22
		$_g = $q->get_type();
		#src/QuestionService.hx:288: lines 288-330
		if ($_g !== null) {
			#src/QuestionService.hx:288: characters 16-22
			$__hx__switch = ($_g->index);
			if ($__hx__switch === 5 || $__hx__switch === 6) {
				#src/QuestionService.hx:290: characters 17-84
				if ($q->get_data() === null) {
					#src/QuestionService.hx:290: characters 34-84
					$q->set_data(new HxAnon([
						"list" => new \Array_hx(),
						"other" => false,
					]));
				}
				#src/QuestionService.hx:292: characters 17-56
				$q->get_data()->other = $form->getValueOf("other");
				#src/QuestionService.hx:295: characters 17-39
				$hasExtras = false;
				#src/QuestionService.hx:296: characters 17-31
				$data = new \Array_hx();
				#src/QuestionService.hx:297: characters 17-33
				$extras = new \Array_hx();
				#src/QuestionService.hx:298: characters 17-78
				$raw = HxDynamicStr::wrap($form->getValueOf("data"))->split("\x0A");
				#src/QuestionService.hx:299: lines 299-310
				$_g1 = 0;
				while ($_g1 < $raw->length) {
					#src/QuestionService.hx:299: characters 22-23
					$d = ($raw->arr[$_g1] ?? null);
					#src/QuestionService.hx:299: lines 299-310
					++$_g1;
					#src/QuestionService.hx:300: characters 21-55
					$d = \StringTools::replace($d, "\x09", "");
					#src/QuestionService.hx:301: characters 21-55
					$d = \StringTools::replace($d, "\x0D", "");
					#src/QuestionService.hx:302: characters 21-51
					if ($d === "EXTRAS") {
						#src/QuestionService.hx:302: characters 37-51
						$hasExtras = true;
					}
					#src/QuestionService.hx:303: lines 303-309
					if (HxString::indexOf($d, ":") > 0) {
						#src/QuestionService.hx:304: lines 304-308
						if ($hasExtras) {
							#src/QuestionService.hx:305: characters 29-43
							$extras->arr[$extras->length] = $d;
							++$extras->length;
						} else {
							#src/QuestionService.hx:307: characters 29-41
							$data->arr[$data->length] = $d;
							++$data->length;
						}
					}
				}

				#src/QuestionService.hx:312: lines 312-319
				$result = [];
				$collection = $data->arr;
				foreach ($collection as $key => $value) {
					#src/QuestionService.hx:313: characters 21-44
					$x = HxString::split($value, ":");
					#src/QuestionService.hx:314: characters 21-56
					$label = trim(($x->arr[0] ?? null));
					#src/QuestionService.hx:315: characters 21-56
					$value1 = trim(($x->arr[1] ?? null));
					#src/QuestionService.hx:316: characters 21-55
					if (($label === null) || ($label === "")) {
						#src/QuestionService.hx:316: characters 50-55
						throw new HxException("Valeur incorrecte");
					}
					#src/QuestionService.hx:317: characters 21-55
					if (($value1 === null) || ($value1 === "")) {
						#src/QuestionService.hx:317: characters 50-55
						throw new HxException("Valeur incorrecte");
					}
					#src/QuestionService.hx:312: lines 312-319
					$result[] = new HxAnon([
						"label" => $label,
						"value" => $value1,
					]);

				}

				$tmp = \Array_hx::wrap($result);
				$q->get_data()->list = $tmp;
				#src/QuestionService.hx:321: lines 321-328
				$result1 = [];
				$collection1 = $extras->arr;
				foreach ($collection1 as $key1 => $value2) {
					#src/QuestionService.hx:322: characters 21-44
					$x1 = HxString::split($value2, ":");
					#src/QuestionService.hx:323: characters 21-56
					$label1 = trim(($x1->arr[0] ?? null));
					#src/QuestionService.hx:324: characters 21-56
					$value3 = trim(($x1->arr[1] ?? null));
					#src/QuestionService.hx:325: characters 21-55
					if (($label1 === null) || ($label1 === "")) {
						#src/QuestionService.hx:325: characters 50-55
						throw new HxException("Valeur incorrecte");
					}
					#src/QuestionService.hx:326: characters 21-55
					if (($value3 === null) || ($value3 === "")) {
						#src/QuestionService.hx:326: characters 50-55
						throw new HxException("Valeur incorrecte");
					}
					#src/QuestionService.hx:321: lines 321-328
					$result1[] = new HxAnon([
						"label" => $label1,
						"value" => $value3,
					]);

				}

				$tmp1 = \Array_hx::wrap($result1);
				$q->get_data()->extras = $tmp1;
			} else {
			}
		}
	}

	/**
	 * @param string $str
	 * @param string $sep
	 * 
	 * @return \Array_hx
	 */
	static public function split ($str, $sep) {
		#src/QuestionService.hx:234: characters 9-32
		if ($str === null) {
			#src/QuestionService.hx:234: characters 23-32
			return new \Array_hx();
		}
		#src/QuestionService.hx:235: characters 9-46
		$str = \StringTools::replace($str, "[", "");
		#src/QuestionService.hx:236: characters 9-46
		$str = \StringTools::replace($str, "]", "");
		#src/QuestionService.hx:237: characters 9-30
		return HxString::split($str, $sep);
	}
}

Boot::registerClass(QuestionService::class, 'QuestionService');
