<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace haxe\io;

use \php\Boot;
use \haxe\CallStack;
use \php\_Boot\HxException;

/**
 * An Input is an abstract reader. See other classes in the `haxe.io` package
 * for several possible implementations.
 * All functions which read data throw `Eof` when the end of the stream
 * is reached.
 */
class Input {
	/**
	 * @var bool
	 * Endianness (word byte order) used when reading numbers.
	 * If `true`, big-endian is used, otherwise `little-endian` is used.
	 */
	public $bigEndian;

	/**
	 * Read and return all available data.
	 * The `bufsize` optional argument specifies the size of chunks by
	 * which data is read. Its default value is target-specific.
	 * 
	 * @param int $bufsize
	 * 
	 * @return Bytes
	 */
	public function readAll ($bufsize = null) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:109: lines 109-111
		if ($bufsize === null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:111: characters 4-11
			$bufsize = 8192;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:116: characters 3-34
		$buf = Bytes::alloc($bufsize);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:117: characters 3-41
		$total = new BytesBuffer();
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:118: lines 118-125
		try {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:119: lines 119-124
			while (true) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:120: characters 5-40
				$len = $this->readBytes($buf, 0, $bufsize);
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:121: lines 121-122
				if ($len === 0) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:122: characters 6-11
					throw new HxException(Error::Blocked());
				}
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:123: characters 5-30
				if (($len < 0) || ($len > $buf->length)) {
					throw new HxException(Error::OutsideBounds());
				} else {
					$left = $total->b;
					$this_s = substr($buf->b->s, 0, $len);
					$total->b = ($left . $this_s);
				}
			}
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			if ($__hx__real_e instanceof Eof) {
				$e = $__hx__real_e;
							} else  throw $__hx__caught_e;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:126: characters 3-26
		return $total->getBytes();
	}

	/**
	 * Read and return one byte.
	 * 
	 * @return int
	 */
	public function readByte () {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:53: characters 10-15
		throw new HxException("Not implemented");
	}

	/**
	 * Read `len` bytes and write them into `s` to the position specified by `pos`.
	 * Returns the actual length of read data that can be smaller than `len`.
	 * See `readFullBytes` that tries to read the exact amount of specified bytes.
	 * 
	 * @param Bytes $s
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return int
	 */
	public function readBytes ($s, $pos, $len) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:65: characters 3-15
		$k = $len;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:66: characters 3-69
		$b = $s->b;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:67: lines 67-68
		if (($pos < 0) || ($len < 0) || (($pos + $len) > $s->length)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:68: characters 4-9
			throw new HxException(Error::OutsideBounds());
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:69: lines 69-83
		try {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:70: lines 70-82
			while ($k > 0) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:74: characters 6-28
				$val = $this->readByte();
				$b->s = substr_replace($b->s, chr($val), $pos, 1);

				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:80: characters 5-10
				++$pos;
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:81: characters 5-8
				--$k;
			}
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			if ($__hx__real_e instanceof Eof) {
				$eof = $__hx__real_e;
							} else  throw $__hx__caught_e;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:84: characters 3-15
		return $len - $k;
	}

	/**
	 * Read `len` bytes and write them into `s` to the position specified by `pos`.
	 * Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.
	 * 
	 * @param Bytes $s
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return void
	 */
	public function readFullBytes ($s, $pos, $len) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:135: lines 135-141
		while ($len > 0) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:136: characters 4-33
			$k = $this->readBytes($s, $pos, $len);
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:137: lines 137-138
			if ($k === 0) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:138: characters 5-10
				throw new HxException(Error::Blocked());
			}
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:139: characters 4-12
			$pos += $k;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:140: characters 4-12
			$len -= $k;
		}
	}

	/**
	 * Read a 32-bit signed integer.
	 * Endianness is specified by the `bigEndian` property.
	 * 
	 * @return int
	 */
	public function readInt32 () {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:282: characters 3-24
		$ch1 = $this->readByte();
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:283: characters 3-24
		$ch2 = $this->readByte();
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:284: characters 3-24
		$ch3 = $this->readByte();
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:285: characters 3-24
		$ch4 = $this->readByte();
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:288: characters 3-115
		$n = ($this->bigEndian ? $ch4 | ($ch3 << 8) | ($ch2 << 16) | ($ch1 << 24) : $ch1 | ($ch2 << 8) | ($ch3 << 16) | ($ch4 << 24));
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:289: lines 289-291
		if (($n & ((int)-2147483648)) !== 0) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:290: characters 4-28
			return $n | ((int)-2147483648);
		} else {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:291: characters 8-16
			return $n;
		}
	}

	/**
	 * Read and `len` bytes as a string.
	 * 
	 * @param int $len
	 * @param Encoding $encoding
	 * 
	 * @return string
	 */
	public function readString ($len, $encoding = null) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:304: characters 3-28
		$b = Bytes::alloc($len);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:305: characters 3-25
		$this->readFullBytes($b, 0, $len);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:309: characters 10-39
		$tmp = null;
		if (($len < 0) || ($len > $b->length)) {
			throw new HxException(Error::OutsideBounds());
		} else {
			$tmp = substr($b->b->s, 0, $len);
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/io/Input.hx:309: characters 3-39
		return $tmp;
	}
}

Boot::registerClass(Input::class, 'haxe.io.Input');
