<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace haxe\ds;

use \php\Boot;
use \haxe\IMap;

/**
 * StringMap allows mapping of String keys to arbitrary values.
 * See `Map` for documentation details.
 * @see https://haxe.org/manual/std-Map.html
 */
class StringMap implements IMap {
	/**
	 * @var mixed
	 */
	public $data;

	/**
	 * Creates a new StringMap.
	 * 
	 * @return void
	 */
	public function __construct () {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/ds/StringMap.hx:34: characters 10-32
		$this1 = [];
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/ds/StringMap.hx:34: characters 3-32
		$this->data = $this1;
	}

	/**
	 * See `Map.remove`
	 * 
	 * @param string $key
	 * 
	 * @return bool
	 */
	public function remove ($key) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/ds/StringMap.hx:50: lines 50-55
		if (array_key_exists($key, $this->data)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/ds/StringMap.hx:51: characters 4-27
			unset($this->data[$key]);
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/ds/StringMap.hx:52: characters 4-15
			return true;
		} else {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/ds/StringMap.hx:54: characters 4-16
			return false;
		}
	}
}

Boot::registerClass(StringMap::class, 'haxe.ds.StringMap');
