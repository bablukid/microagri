<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace haxe\xml;

use \php\Boot;
use \haxe\ds\StringMap;
use \php\_Boot\HxException;

class Parser {
	/**
	 * @var StringMap
	 */
	static public $escapes;

	/**
	 * @param string $str
	 * @param bool $strict
	 * @param int $p
	 * @param \Xml $parent
	 * 
	 * @return int
	 */
	static public function doParse ($str, $strict, $p = 0, $parent = null) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:127: lines 127-452
		if ($p === null) {
			$p = 0;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:128: characters 3-22
		$xml = null;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:129: characters 3-23
		$state = 1;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:130: characters 3-22
		$next = 1;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:131: characters 3-20
		$aname = null;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:132: characters 3-17
		$start = 0;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:133: characters 3-17
		$nsubs = 0;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:134: characters 3-21
		$nbrackets = 0;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:135: characters 3-29
		$c = \StringTools::fastCodeAt($str, $p);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:136: characters 3-29
		$buf = new \StringBuf();
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:138: characters 3-28
		$escapeNext = 1;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:139: characters 3-25
		$attrValQuote = -1;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:144: lines 144-424
		while ($c !== 0) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:146: lines 146-422
			if ($state === 0) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:149: lines 149-159
				if ($c === 9 || $c === 10 || $c === 13 || $c === 32) {
				} else {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:157: characters 8-20
					$state = $next;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:158: characters 8-16
					continue;
				}
			} else if ($state === 1) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:161: lines 161-170
				if ($c === 60) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:164: characters 8-31
					$state = 0;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:165: characters 8-27
					$next = 2;
				} else {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:167: characters 8-17
					$start = $p;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:168: characters 8-24
					$state = 13;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:169: characters 8-16
					continue;
				}
			} else if ($state === 2) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:195: lines 195-236
				if ($c === 33) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:198: lines 198-222
					if (\StringTools::fastCodeAt($str, $p + 1) === 91) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:200: characters 9-15
						$p += 2;
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:201: lines 201-202
						if (mb_strtoupper(mb_substr($str, $p, 6)) !== "CDATA[") {
							#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:202: characters 10-15
							throw new HxException(new XmlParserException("Expected <![CDATA[", $str, $p));
						}
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:203: characters 9-15
						$p += 5;
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:204: characters 9-24
						$state = 17;
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:205: characters 9-22
						$start = $p + 1;
					} else if ((\StringTools::fastCodeAt($str, $p + 1) === 68) || (\StringTools::fastCodeAt($str, $p + 1) === 100)) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:209: lines 209-210
						if (mb_strtoupper(mb_substr($str, $p + 2, 6)) !== "OCTYPE") {
							#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:210: characters 10-15
							throw new HxException(new XmlParserException("Expected <!DOCTYPE", $str, $p));
						}
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:211: characters 9-15
						$p += 8;
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:212: characters 9-26
						$state = 16;
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:213: characters 9-22
						$start = $p + 1;
					} else if ((\StringTools::fastCodeAt($str, $p + 1) !== 45) || (\StringTools::fastCodeAt($str, $p + 2) !== 45)) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:216: characters 9-14
						throw new HxException(new XmlParserException("Expected <!--", $str, $p));
					} else {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:219: characters 9-15
						$p += 2;
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:220: characters 9-26
						$state = 15;
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:221: characters 9-22
						$start = $p + 1;
					}
				} else if ($c === 47) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:227: lines 227-228
					if ($parent === null) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:228: characters 9-14
						throw new HxException(new XmlParserException("Expected node name", $str, $p));
					}
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:229: characters 8-21
					$start = $p + 1;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:230: characters 8-31
					$state = 0;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:231: characters 8-22
					$next = 10;
				} else if ($c === 63) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:224: characters 8-24
					$state = 14;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:225: characters 8-17
					$start = $p;
				} else {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:233: characters 8-26
					$state = 3;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:234: characters 8-17
					$start = $p;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:235: characters 8-16
					continue;
				}
			} else if ($state === 3) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:238: lines 238-247
				if (!((($c >= 97) && ($c <= 122)) || (($c >= 65) && ($c <= 90)) || (($c >= 48) && ($c <= 57)) || ($c === 58) || ($c === 46) || ($c === 95) || ($c === 45))) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:240: lines 240-241
					if ($p === $start) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:241: characters 8-13
						throw new HxException(new XmlParserException("Expected node name", $str, $p));
					}
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:242: characters 7-60
					$xml = \Xml::createElement(mb_substr($str, $start, $p - $start));
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:243: characters 7-20
					$parent->addChild($xml);
					++$nsubs;

					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:244: characters 7-30
					$state = 0;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:245: characters 7-20
					$next = 4;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:246: characters 7-15
					continue;
				}
			} else if ($state === 4) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:249: lines 249-259
				if ($c === 47) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:252: characters 8-26
					$state = 11;
				} else if ($c === 62) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:254: characters 8-24
					$state = 9;
				} else {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:256: characters 8-29
					$state = 5;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:257: characters 8-17
					$start = $p;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:258: characters 8-16
					continue;
				}
			} else if ($state === 5) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:261: lines 261-273
				if (!((($c >= 97) && ($c <= 122)) || (($c >= 65) && ($c <= 90)) || (($c >= 48) && ($c <= 57)) || ($c === 58) || ($c === 46) || ($c === 95) || ($c === 45))) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:264: lines 264-265
					if ($start === $p) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:265: characters 8-13
						throw new HxException(new XmlParserException("Expected attribute name", $str, $p));
					}
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:263: characters 7-15
					$tmp = mb_substr($str, $start, $p - $start);
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:267: characters 7-18
					$aname = $tmp;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:268: lines 268-269
					if ($xml->exists($aname)) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:269: characters 8-13
						throw new HxException(new XmlParserException("Duplicate attribute [" . ($aname??'null') . "]", $str, $p));
					}
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:270: characters 7-30
					$state = 0;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:271: characters 7-22
					$next = 6;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:272: characters 7-15
					continue;
				}
			} else if ($state === 6) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:275: lines 275-282
				if ($c === 61) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:278: characters 8-31
					$state = 0;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:279: characters 8-29
					$next = 7;
				} else {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:281: characters 8-13
					throw new HxException(new XmlParserException("Expected =", $str, $p));
				}
			} else if ($state === 7) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:284: lines 284-293
				if ($c === 34 || $c === 39) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:287: characters 8-29
					$buf = new \StringBuf();
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:288: characters 8-28
					$state = 8;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:289: characters 8-21
					$start = $p + 1;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:290: characters 8-24
					$attrValQuote = $c;
				} else {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:292: characters 8-13
					throw new HxException(new XmlParserException("Expected \"", $str, $p));
				}
			} else if ($state === 8) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:295: lines 295-311
				if ($c === 38) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:297: characters 8-11
					$buf1 = $buf;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:297: characters 8-41
					$buf1->b = ($buf1->b??'null') . (mb_substr($str, $start, $p - $start)??'null');
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:298: characters 8-24
					$state = 18;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:299: characters 8-33
					$escapeNext = 8;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:300: characters 8-21
					$start = $p + 1;
				} else if ($c === 60 || $c === 62) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:301: lines 301-310
					if ($strict) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:303: characters 8-13
						throw new HxException(new XmlParserException("Invalid unescaped " . (mb_chr($c)??'null') . " in attribute value", $str, $p));
					} else if ($c === $attrValQuote) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:305: characters 8-11
						$buf2 = $buf;
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:305: characters 8-41
						$buf2->b = ($buf2->b??'null') . (mb_substr($str, $start, $p - $start)??'null');
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:306: characters 8-33
						$val = $buf->b;
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:307: characters 8-29
						$buf = new \StringBuf();
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:308: characters 8-27
						$xml->set($aname, $val);
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:309: characters 8-31
						$state = 0;
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:310: characters 8-21
						$next = 4;
					}
				} else {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:304: lines 304-310
					if ($c === $attrValQuote) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:305: characters 8-11
						$buf3 = $buf;
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:305: characters 8-41
						$buf3->b = ($buf3->b??'null') . (mb_substr($str, $start, $p - $start)??'null');
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:306: characters 8-33
						$val1 = $buf->b;
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:307: characters 8-29
						$buf = new \StringBuf();
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:308: characters 8-27
						$xml->set($aname, $val1);
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:309: characters 8-31
						$state = 0;
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:310: characters 8-21
						$next = 4;
					}
				}
			} else if ($state === 9) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:313: characters 6-38
				$p = Parser::doParse($str, $strict, $p, $xml);
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:314: characters 6-15
				$start = $p;
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:315: characters 6-21
				$state = 1;
			} else if ($state === 10) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:335: lines 335-350
				if (!((($c >= 97) && ($c <= 122)) || (($c >= 65) && ($c <= 90)) || (($c >= 48) && ($c <= 57)) || ($c === 58) || ($c === 46) || ($c === 95) || ($c === 45))) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:337: lines 337-338
					if ($start === $p) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:338: characters 8-13
						throw new HxException(new XmlParserException("Expected node name", $str, $p));
					}
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:340: characters 7-43
					$v = mb_substr($str, $start, $p - $start);
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:341: lines 341-343
					if (($parent === null) || ($parent->nodeType !== 0)) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:342: characters 8-13
						throw new HxException(new XmlParserException("Unexpected </" . ($v??'null') . ">, tag is not open", $str, $p));
					}
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:344: characters 16-31
					if ($parent->nodeType !== \Xml::$Element) {
						throw new HxException("Bad node type, expected Element but found " . ($parent->nodeType??'null'));
					}
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:344: lines 344-345
					if ($v !== $parent->nodeName) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:345: characters 52-67
						if ($parent->nodeType !== \Xml::$Element) {
							throw new HxException("Bad node type, expected Element but found " . ($parent->nodeType??'null'));
						}
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:345: characters 8-13
						throw new HxException(new XmlParserException("Expected </" . ($parent->nodeName??'null') . ">", $str, $p));
					}
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:347: characters 7-30
					$state = 0;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:348: characters 7-28
					$next = 12;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:349: characters 7-15
					continue;
				}
			} else if ($state === 11) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:317: lines 317-323
				if ($c === 62) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:320: characters 8-23
					$state = 1;
				} else {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:322: characters 8-13
					throw new HxException(new XmlParserException("Expected >", $str, $p));
				}
			} else if ($state === 12) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:325: lines 325-333
				if ($c === 62) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:328: lines 328-329
					if ($nsubs === 0) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:329: characters 9-46
						$parent->addChild(\Xml::createPCData(""));
					}
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:330: characters 8-16
					return $p;
				} else {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:332: characters 8-13
					throw new HxException(new XmlParserException("Expected >", $str, $p));
				}
			} else if ($state === 13) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:172: lines 172-185
				if ($c === 60) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:174: characters 7-10
					$buf4 = $buf;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:174: characters 7-40
					$buf4->b = ($buf4->b??'null') . (mb_substr($str, $start, $p - $start)??'null');
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:175: characters 7-52
					$child = \Xml::createPCData($buf->b);
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:176: characters 7-28
					$buf = new \StringBuf();
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:177: characters 7-22
					$parent->addChild($child);
					++$nsubs;

					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:178: characters 7-30
					$state = 0;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:179: characters 7-26
					$next = 2;
				} else if ($c === 38) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:181: characters 7-10
					$buf5 = $buf;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:181: characters 7-40
					$buf5->b = ($buf5->b??'null') . (mb_substr($str, $start, $p - $start)??'null');
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:182: characters 7-23
					$state = 18;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:183: characters 7-28
					$escapeNext = 13;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:184: characters 7-20
					$start = $p + 1;
				}
			} else if ($state === 14) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:369: lines 369-375
				if (($c === 63) && (\StringTools::fastCodeAt($str, $p + 1) === 62)) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:371: characters 7-10
					++$p;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:372: characters 7-54
					$str1 = mb_substr($str, $start + 1, $p - $start - 2);
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:373: characters 7-53
					$parent->addChild(\Xml::createProcessingInstruction($str1));
					++$nsubs;

					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:374: characters 7-22
					$state = 1;
				}
			} else if ($state === 15) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:352: lines 352-357
				if (($c === 45) && (\StringTools::fastCodeAt($str, $p + 1) === 45) && (\StringTools::fastCodeAt($str, $p + 2) === 62)) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:354: characters 7-64
					$parent->addChild(\Xml::createComment(mb_substr($str, $start, $p - $start)));
					++$nsubs;

					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:355: characters 7-13
					$p += 2;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:356: characters 7-22
					$state = 1;
				}
			} else if ($state === 16) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:359: lines 359-367
				if ($c === 91) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:360: characters 7-18
					++$nbrackets;
				} else if ($c === 93) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:362: characters 7-18
					--$nbrackets;
				} else if (($c === 62) && ($nbrackets === 0)) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:365: characters 7-64
					$parent->addChild(\Xml::createDocType(mb_substr($str, $start, $p - $start)));
					++$nsubs;

					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:366: characters 7-22
					$state = 1;
				}
			} else if ($state === 17) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:187: lines 187-193
				if (($c === 93) && (\StringTools::fastCodeAt($str, $p + 1) === 93) && (\StringTools::fastCodeAt($str, $p + 2) === 62)) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:189: characters 7-65
					$child1 = \Xml::createCData(mb_substr($str, $start, $p - $start));
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:190: characters 7-22
					$parent->addChild($child1);
					++$nsubs;

					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:191: characters 7-13
					$p += 2;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:192: characters 7-22
					$state = 1;
				}
			} else if ($state === 18) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:377: lines 377-421
				if ($c === 59) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:379: characters 7-44
					$s = mb_substr($str, $start, $p - $start);
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:380: lines 380-410
					if (\StringTools::fastCodeAt($s, 0) === 35) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:381: lines 381-383
						$c1 = (\StringTools::fastCodeAt($s, 1) === 120 ? \Std::parseInt("0" . (mb_substr($s, 1, mb_strlen($s) - 1)??'null')) : \Std::parseInt(mb_substr($s, 1, mb_strlen($s) - 1)));
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:403: characters 8-11
						$buf6 = $buf;
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:403: characters 8-22
						$buf6->b = ($buf6->b??'null') . (mb_chr($c1)??'null');
					} else if (!array_key_exists($s, Parser::$escapes->data)) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:405: lines 405-406
						if ($strict) {
							#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:406: characters 9-14
							throw new HxException(new XmlParserException("Undefined entity: " . ($s??'null'), $str, $p));
						}
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:407: characters 8-23
						$buf->add("&" . ($s??'null') . ";");
					} else {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:409: characters 8-31
						$buf->add((Parser::$escapes->data[$s] ?? null));
					}
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:411: characters 7-20
					$start = $p + 1;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:412: characters 7-25
					$state = $escapeNext;
				} else if (!((($c >= 97) && ($c <= 122)) || (($c >= 65) && ($c <= 90)) || (($c >= 48) && ($c <= 57)) || ($c === 58) || ($c === 46) || ($c === 95) || ($c === 45)) && ($c !== 35)) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:414: lines 414-415
					if ($strict) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:415: characters 8-13
						throw new HxException(new XmlParserException("Invalid character in entity: " . (mb_chr($c)??'null'), $str, $p));
					}
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:416: characters 7-10
					$buf7 = $buf;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:416: characters 7-28
					$buf7->b = ($buf7->b??'null') . (mb_chr(38)??'null');
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:417: characters 7-10
					$buf8 = $buf;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:417: characters 7-40
					$buf8->b = ($buf8->b??'null') . (mb_substr($str, $start, $p - $start)??'null');
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:418: characters 7-10
					--$p;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:419: characters 7-20
					$start = $p + 1;
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:420: characters 7-25
					$state = $escapeNext;
				}
			}
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:423: characters 4-27
			$c = \StringTools::fastCodeAt($str, ++$p);
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:426: lines 426-430
		if ($state === 1) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:428: characters 4-13
			$start = $p;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:429: characters 4-20
			$state = 13;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:432: lines 432-442
		if ($state === 13) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:434: lines 434-436
			if ($parent->nodeType === 0) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:435: characters 54-69
				if ($parent->nodeType !== \Xml::$Element) {
					throw new HxException("Bad node type, expected Element but found " . ($parent->nodeType??'null'));
				}
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:435: characters 5-10
				throw new HxException(new XmlParserException("Unclosed node <" . ($parent->nodeName??'null') . ">", $str, $p));
			}
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:437: lines 437-440
			if (($p !== $start) || ($nsubs === 0)) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:438: characters 5-8
				$buf9 = $buf;
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:438: characters 5-36
				$buf9->b = ($buf9->b??'null') . (mb_substr($str, $start, $p - $start)??'null');
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:439: characters 5-47
				$parent->addChild(\Xml::createPCData($buf->b));
				++$nsubs;

			}
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:441: characters 4-12
			return $p;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:444: lines 444-449
		if (!$strict && ($state === 18) && ($escapeNext === 13)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:445: characters 4-7
			$buf10 = $buf;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:445: characters 4-25
			$buf10->b = ($buf10->b??'null') . (mb_chr(38)??'null');
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:446: characters 4-7
			$buf11 = $buf;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:446: characters 4-37
			$buf11->b = ($buf11->b??'null') . (mb_substr($str, $start, $p - $start)??'null');
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:447: characters 4-46
			$parent->addChild(\Xml::createPCData($buf->b));
			++$nsubs;

			#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:448: characters 4-12
			return $p;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:451: characters 3-8
		throw new HxException(new XmlParserException("Unexpected end", $str, $p));
	}

	/**
	 * Parses the String into an XML Document. Set strict parsing to true in order to enable a strict check of XML attributes and entities.
	 *
	 * @throws haxe.xml.XmlParserException
	 * 
	 * @param string $str
	 * @param bool $strict
	 * 
	 * @return \Xml
	 */
	static public function parse ($str, $strict = false) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:120: lines 120-124
		if ($strict === null) {
			$strict = false;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:121: characters 3-34
		$doc = \Xml::createDocument();
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:122: characters 3-31
		Parser::doParse($str, $strict, 0, $doc);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/haxe/xml/Parser.hx:123: characters 3-13
		return $doc;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		$h = new StringMap();
		$h->data["lt"] = "<";
		$h->data["gt"] = ">";
		$h->data["amp"] = "&";
		$h->data["quot"] = "\"";
		$h->data["apos"] = "'";
		self::$escapes = $h;
	}
}

Boot::registerClass(Parser::class, 'haxe.xml.Parser');
Parser::__hx__init();
