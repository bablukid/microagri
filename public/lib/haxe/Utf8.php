<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace haxe;

use \php\Boot;

/**
 * Since not all platforms guarantee that `String` always uses UTF-8 encoding, you
 * can use this cross-platform API to perform operations on such strings.
 */
class Utf8 {
	/**
	 * @var string
	 */
	public $__b;

	/**
	 * Similar to `String.charCodeAt` but uses the UTF8 character position.
	 * 
	 * @param string $s
	 * @param int $index
	 * 
	 * @return int
	 */
	static public function charCodeAt ($s, $index) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/Utf8.hx:59: characters 3-32
		return Utf8::uord(Utf8::sub($s, $index, 1));
	}

	/**
	 * Call the `chars` function for each UTF8 char of the string.
	 * 
	 * @param string $s
	 * @param \Closure $chars
	 * 
	 * @return void
	 */
	static public function iter ($s, $chars) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/Utf8.hx:52: characters 3-23
		$len = Utf8::length($s);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/Utf8.hx:53: lines 53-55
		$_g = 0;
		$_g1 = $len;
		while ($_g < $_g1) {
			$i = $_g++;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/Utf8.hx:54: characters 4-27
			$chars(Utf8::charCodeAt($s, $i));
		}

	}

	/**
	 * Returns the number of UTF8 chars of the String.
	 * 
	 * @param string $s
	 * 
	 * @return int
	 */
	static public function length ($s) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/Utf8.hx:76: characters 3-34
		return mb_strlen($s, "UTF-8");
	}

	/**
	 * This is similar to `String.substr` but the `pos` and `len` parts are considering UTF8 characters.
	 * 
	 * @param string $s
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return string
	 */
	static public function sub ($s, $pos, $len) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/Utf8.hx:84: characters 3-44
		return mb_substr($s, $pos, $len, "UTF-8");
	}

	/**
	 * @param int $i
	 * 
	 * @return string
	 */
	static public function uchr ($i) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/Utf8.hx:63: characters 3-77
		return mb_convert_encoding(pack("N", $i), "UTF-8", "UCS-4BE");
	}

	/**
	 * @param string $s
	 * 
	 * @return int
	 */
	static public function uord ($s) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/Utf8.hx:67: characters 3-81
		$c = unpack("N", mb_convert_encoding($s, "UCS-4BE", "UTF-8"));
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/Utf8.hx:68: characters 3-14
		return $c[1];
	}

	/**
	 * Allocate a new Utf8 buffer using an optional bytes size.
	 * 
	 * @param int $size
	 * 
	 * @return void
	 */
	public function __construct ($size = null) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/Utf8.hx:32: characters 3-11
		$this->__b = "";
	}

	/**
	 * Add the given UTF8 character code to the buffer.
	 * 
	 * @param int $c
	 * 
	 * @return void
	 */
	public function addChar ($c) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/Utf8.hx:36: characters 3-6
		$tmp = $this;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/Utf8.hx:36: characters 3-17
		$tmp->__b = ($tmp->__b??'null') . (Utf8::uchr($c)??'null');
	}

	/**
	 * Returns the buffer converted to a String.
	 * 
	 * @return string
	 */
	public function toString () {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/Utf8.hx:40: characters 3-13
		return $this->__b;
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(Utf8::class, 'haxe.Utf8');
