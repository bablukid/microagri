<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace haxe\web;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\CallStack;
use \haxe\rtti\Meta;
use \php\_Boot\HxString;
use \php\_Boot\HxClosure;
use \haxe\ds\StringMap;
use \haxe\Unserializer;
use \php\_Boot\HxException;

class Dispatch {
	/**
	 * @var \Array_hx
	 */
	static public $GET_RULES = null;

	/**
	 * @var object
	 */
	public $cfg;
	/**
	 * @var string
	 */
	public $name;
	/**
	 * @var \Closure
	 */
	public $onMeta;
	/**
	 * @var StringMap
	 */
	public $params;
	/**
	 * @var \Array_hx
	 */
	public $parts;
	/**
	 * @var bool
	 */
	public $subDispatch;

	/**
	 * @param mixed $obj
	 * 
	 * @return object
	 */
	static public function extractConfig ($obj) {
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:470: characters 3-30
		$c = \Type::getClass($obj);
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:471: characters 3-38
		$dc = Meta::getType($c);
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:472: characters 3-42
		$m = (Boot::dynamicField($dc, 'dispatchConfig')->arr[0] ?? null);
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:473: lines 473-476
		if (Boot::is($m, Boot::getClass('String'))) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:474: characters 4-32
			$m = Unserializer::run($m);
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:475: characters 4-28
			Boot::dynamicField($dc, 'dispatchConfig')[0] = $m;
		}
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:477: characters 3-34
		return new HxAnon([
			"obj" => $obj,
			"rules" => $m,
		]);
	}

	/**
	 * @param string $url
	 * @param StringMap $params
	 * 
	 * @return void
	 */
	public function __construct ($url, $params) {
		if (!$this->__hx__default__onMeta) {
			$this->__hx__default__onMeta = new HxClosure($this, 'onMeta');
			if ($this->onMeta === null) $this->onMeta = $this->__hx__default__onMeta;
		}
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:78: characters 3-25
		$this->parts = HxString::split($url, "/");
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:79: characters 3-37
		if (($this->parts->arr[0] ?? null) === "") {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:79: characters 24-37
			$_this = $this->parts;
			if ($_this->length > 0) {
				$_this->length--;
			}
			array_shift($_this->arr);
		}
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:80: characters 3-23
		$this->params = $params;
	}

	/**
	 * @param \Array_hx $params
	 * @param bool $opt
	 * 
	 * @return object
	 */
	public function checkParams ($params, $opt) {
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:218: characters 3-16
		$po = new HxAnon();
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:219: lines 219-227
		$_g = 0;
		while ($_g < $params->length) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:219: characters 8-9
			$p = ($params->arr[$_g] ?? null);
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:219: lines 219-227
			++$_g;
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:220: characters 4-36
			$v = ($this->params->data[$p->name] ?? null);
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:221: lines 221-225
			if ($v === null) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:222: characters 5-25
				if ($p->opt) {
					#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:222: characters 17-25
					continue;
				}
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:223: characters 5-26
				if ($opt) {
					#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:223: characters 15-26
					return null;
				}
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:224: characters 5-10
				throw new HxException(DispatchError::DEMissingParam($p->name));
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:226: characters 4-56
			\Reflect::setField($po, $p->name, $this->match($v, $p->rule, $p->opt));
		}

		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:228: characters 3-12
		return $po;
	}

	/**
	 * @param \Array_hx $args
	 * @param DispatchRule $r
	 * 
	 * @return void
	 */
	public function loop ($args, $r) {
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:232: lines 232-252
		$__hx__switch = ($r->index);
		if ($__hx__switch === 0) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:236: characters 16-17
			$r1 = $r->params[0];
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:237: characters 20-33
			$_this = $this->parts;
			if ($_this->length > 0) {
				$_this->length--;
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:237: characters 4-45
			$x = $this->match(array_shift($_this->arr), $r1, false);
			$args->arr[$args->length] = $x;
			++$args->length;

		} else if ($__hx__switch === 1) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:238: characters 15-17
			$rl = $r->params[0];
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:239: lines 239-240
			$_g = 0;
			while ($_g < $rl->length) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:239: characters 9-10
				$r2 = ($rl->arr[$_g] ?? null);
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:239: lines 239-240
				++$_g;
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:240: characters 21-34
				$_this1 = $this->parts;
				if ($_this1->length > 0) {
					$_this1->length--;
				}
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:240: characters 5-46
				$x1 = $this->match(array_shift($_this1->arr), $r2, false);
				$args->arr[$args->length] = $x1;
				++$args->length;

			}

		} else if ($__hx__switch === 2) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:233: characters 26-29
			$opt = $r->params[2];
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:233: characters 18-24
			$params = $r->params[1];
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:233: characters 15-16
			$r3 = $r->params[0];
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:234: characters 4-17
			$this->loop($args, $r3);
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:235: characters 4-41
			$x2 = $this->checkParams($params, $opt);
			$args->arr[$args->length] = $x2;
			++$args->length;


		} else if ($__hx__switch === 3) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:241: characters 15-16
			$r4 = $r->params[0];
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:242: characters 4-17
			$this->loop($args, $r4);
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:243: characters 4-35
			$c = \Type::getClass($this->cfg->obj);
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:244: characters 4-10
			$m = null;
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:245: lines 245-249
			while (true) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:246: characters 5-26
				if ($c === null) {
					#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:246: characters 21-26
					throw new HxException("assert");
				}
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:247: characters 5-57
				$m = \Reflect::field(Meta::getFields($c), $this->name);
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:248: characters 5-30
				$c = \Type::getSuperClass($c);
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:245: lines 245-249
				if (!($m === null)) {
					break;
				}
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:250: lines 250-251
			$_g1 = 0;
			$_g11 = \Reflect::fields($m);
			while ($_g1 < $_g11->length) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:250: characters 9-11
				$mv = ($_g11->arr[$_g1] ?? null);
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:250: lines 250-251
				++$_g1;
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:251: characters 5-37
				$this->onMeta($mv, \Reflect::field($m, $mv));
			}


		}
	}

	/**
	 * @param string $v
	 * @param MatchRule $r
	 * @param bool $opt
	 * 
	 * @return mixed
	 */
	public function match ($v, $r, $opt) {
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:153: lines 153-214
		$__hx__switch = ($r->index);
		if ($__hx__switch === 0) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:155: characters 4-25
			if ($v === null) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:155: characters 20-25
				throw new HxException(DispatchError::DEMissing());
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:156: characters 4-36
			if ($opt && ($v === "")) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:156: characters 25-36
				return null;
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:157: characters 4-28
			$v1 = \Std::parseInt($v);
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:158: characters 4-25
			if ($v1 === null) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:158: characters 20-25
				throw new HxException(DispatchError::DEInvalidValue());
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:159: characters 4-12
			return $v1;
		} else if ($__hx__switch === 1) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:170: characters 11-63
			if (($v !== null) && ($v !== "0") && ($v !== "false")) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:170: characters 52-63
				return $v !== "null";
			} else {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:170: characters 11-63
				return false;
			}
		} else if ($__hx__switch === 2) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:161: characters 4-25
			if ($v === null) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:161: characters 20-25
				throw new HxException(DispatchError::DEMissing());
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:162: characters 4-36
			if ($opt && ($v === "")) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:162: characters 25-36
				return null;
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:163: characters 4-30
			$v2 = \Std::parseFloat($v);
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:164: characters 4-29
			if (is_nan($v2)) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:164: characters 24-29
				throw new HxException(DispatchError::DEInvalidValue());
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:165: characters 4-12
			return $v2;
		} else if ($__hx__switch === 3) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:167: characters 4-25
			if ($v === null) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:167: characters 20-25
				throw new HxException(DispatchError::DEMissing());
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:168: characters 4-12
			return $v;
		} else if ($__hx__switch === 4) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:172: characters 4-25
			if ($v === null) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:172: characters 20-25
				throw new HxException(DispatchError::DEMissing());
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:173: lines 173-177
			try {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:174: characters 5-30
				return \Date::fromString($v);
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e = $__hx__real_e;
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:176: characters 5-10
				throw new HxException(DispatchError::DEInvalidValue());
			}
		} else if ($__hx__switch === 5) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:178: characters 15-16
			$e1 = $r->params[0];
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:179: characters 4-25
			if ($v === null) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:179: characters 20-25
				throw new HxException(DispatchError::DEMissing());
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:180: characters 4-36
			if ($opt && ($v === "")) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:180: characters 25-36
				return null;
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:181: characters 4-23
			if ($v === "") {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:181: characters 18-23
				throw new HxException(DispatchError::DEMissing());
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:182: characters 4-43
			$en = \Type::resolveEnum($e1);
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:183: characters 4-26
			if ($en === null) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:183: characters 21-26
				throw new HxException("assert");
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:184: characters 4-19
			$ev = null;
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:185: lines 185-189
			if ((HxString::charCodeAt($v, 0) >= 48) && (HxString::charCodeAt($v, 0) <= 57)) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:186: characters 5-51
				$ev = \Type::createEnumIndex($en, \Std::parseInt($v));
			} else {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:188: characters 5-32
				$ev = \Type::createEnum($en, $v);
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:190: characters 4-13
			return $ev;
		} else if ($__hx__switch === 6) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:192: lines 192-193
			if ($v !== null) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:193: characters 5-21
				$_this = $this->parts;
				$_this->length = array_unshift($_this->arr, $v);
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:194: characters 4-22
			$this->subDispatch = true;
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:195: characters 4-15
			return $this;
		} else if ($__hx__switch === 7) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:196: characters 18-22
			$lock = $r->params[1];
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:196: characters 15-16
			$c = $r->params[0];
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:197: characters 4-25
			if ($v === null) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:197: characters 20-25
				throw new HxException(DispatchError::DEMissing());
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:198: characters 4-28
			$v3 = \Std::parseInt($v);
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:199: characters 4-25
			if ($v3 === null) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:199: characters 20-25
				throw new HxException(DispatchError::DEInvalidValue());
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:200: characters 4-44
			$cl = \Type::resolveClass($c);
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:201: characters 4-26
			if ($cl === null) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:201: characters 21-26
				throw new HxException("assert");
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:202: characters 4-20
			$o = Boot::dynamicField($cl, 'manager')->unsafeGet($v3, $lock);
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:208: characters 4-25
			if ($o === null) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:208: characters 20-25
				throw new HxException(DispatchError::DEInvalidValue());
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:209: characters 4-12
			return $o;
		} else if ($__hx__switch === 8) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:210: characters 14-15
			$r1 = $r->params[0];
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:211: lines 211-212
			if ($v === null) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:212: characters 5-16
				return null;
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:213: characters 4-28
			return $this->match($v, $r1, true);
		}
	}

	/**
	 * @param string $v
	 * @param \Array_hx $args
	 * 
	 * @return void
	 */
	public function onMeta ($v, $args)
	{
		if ($this->onMeta !== $this->__hx__default__onMeta) return call_user_func_array($this->onMeta, func_get_args());
			}
	protected $__hx__default__onMeta;

	/**
	 * @param string $url
	 * @param StringMap $params
	 * 
	 * @return void
	 */
	public function redirect ($url, $params = null) {
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:139: characters 3-25
		$this->parts = HxString::split($url, "/");
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:140: characters 3-37
		if (($this->parts->arr[0] ?? null) === "") {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:140: characters 24-37
			$_this = $this->parts;
			if ($_this->length > 0) {
				$_this->length--;
			}
			array_shift($_this->arr);
		}
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:141: characters 3-44
		if ($params !== null) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:141: characters 24-44
			$this->params = $params;
		}
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:142: characters 3-8
		throw new HxException(new Redirect());
	}

	/**
	 * @param string $name
	 * 
	 * @return string
	 */
	public function resolveName ($name) {
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:107: characters 3-14
		return $name;
	}

	/**
	 * @param object $cfg
	 * 
	 * @return void
	 */
	public function runtimeDispatch ($cfg) {
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:111: characters 10-23
		$_this = $this->parts;
		if ($_this->length > 0) {
			$_this->length--;
		}
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:111: characters 3-23
		$this->name = array_shift($_this->arr);
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:112: lines 112-113
		if ($this->name === null) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:113: characters 4-20
			$this->name = "default";
		}
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:114: characters 3-27
		$this->name = $this->resolveName($this->name);
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:115: characters 3-17
		$this->cfg = $cfg;
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:116: characters 3-57
		$r = \Reflect::field($cfg->rules, $this->name);
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:117: lines 117-123
		if ($r === null) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:118: characters 4-43
			$r = \Reflect::field($cfg->rules, "default");
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:119: lines 119-120
			if ($r === null) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:120: characters 5-10
				throw new HxException(DispatchError::DENotFound($this->name));
			}
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:121: characters 4-23
			$_this1 = $this->parts;
			$_this1->length = array_unshift($_this1->arr, $this->name);

			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:122: characters 4-20
			$this->name = "default";
		}
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:124: characters 3-62
		$this->name = "do" . (mb_strtoupper(mb_substr($this->name, 0, 1))??'null') . (mb_substr($this->name, 1, null)??'null');
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:125: characters 3-17
		$args = new \Array_hx();
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:126: characters 3-22
		$this->subDispatch = false;
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:127: characters 3-16
		$this->loop($args, $r);
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:128: lines 128-130
		if (($this->parts->length > 0) && !$this->subDispatch) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:129: characters 4-83
			if (($this->parts->length === 1) && (($this->parts->arr[$this->parts->length - 1] ?? null) === "")) {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:129: characters 61-72
				$_this2 = $this->parts;
				if ($_this2->length > 0) {
					$_this2->length--;
				}
				array_pop($_this2->arr);
			} else {
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:129: characters 78-83
				throw new HxException(DispatchError::DETooManyValues());
			}
		}
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:131: lines 131-135
		try {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:132: characters 4-67
			\Reflect::callMethod($cfg->obj, \Reflect::field($cfg->obj, $this->name), $args);
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			if ($__hx__real_e instanceof Redirect) {
				$e = $__hx__real_e;
				#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:134: characters 4-24
				$this->runtimeDispatch($cfg);
			} else  throw $__hx__caught_e;
		}
	}

	/**
	 * @param int $cfgIndex
	 * 
	 * @return mixed
	 */
	public function runtimeGetParams ($cfgIndex) {
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:147: lines 147-148
		if (Dispatch::$GET_RULES === null) {
			#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:148: characters 4-84
			Dispatch::$GET_RULES = Unserializer::run((Boot::dynamicField(Meta::getType(Boot::getClass(Dispatch::class)), 'getParams')->arr[0] ?? null));
		}
		#/home/bubar/haxe/haxe_libraries/hx3compat/1.0.3/haxelib/std/haxe/web/Dispatch.hx:149: characters 3-48
		return $this->checkParams((Dispatch::$GET_RULES->arr[$cfgIndex] ?? null), true);
	}
}

Boot::registerClass(Dispatch::class, 'haxe.web.Dispatch');
