<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace db;

use \php\_Boot\HxAnon;
use \php\Boot;
use \sys\db\Object_hx;
use \sys\db\Manager;

class User extends Object_hx {
	/**
	 * @var Manager
	 */
	static public $manager;

	/**
	 * @var string
	 */
	public $address1;
	/**
	 * @var string
	 */
	public $address2;
	/**
	 * @var \Date
	 */
	public $cdate;
	/**
	 * @var string
	 */
	public $city;
	/**
	 * @var string
	 */
	public $email;
	/**
	 * @var int
	 */
	public $id;
	/**
	 * @var string
	 */
	public $lang;
	/**
	 * @var \Date
	 */
	public $ldate;
	/**
	 * @var string
	 */
	public $name;
	/**
	 * @var bool
	 */
	public $newsletter;
	/**
	 * @var string
	 */
	public $pass;
	/**
	 * @var string
	 */
	public $phone;
	/**
	 * @var int
	 */
	public $rights;
	/**
	 * @var string
	 */
	public $zipCode;

	/**
	 * @return void
	 */
	public function __construct () {
		#src/db/User.hx:30: characters 3-10
		parent::__construct();
		#src/db/User.hx:31: characters 3-26
		$this->cdate = \Date::now();
		#src/db/User.hx:32: characters 3-23
		$this->rights = 0;
		#src/db/User.hx:33: characters 3-14
		$this->lang = "fr";
		#src/db/User.hx:34: characters 3-21
		$this->newsletter = false;
	}

	/**
	 * @return Manager
	 */
	public function __getManager () {
		#/home/bubar/projects/spod/src/sys/db/RecordMacros.hx:1432: characters 19-40
		return User::$manager;
	}

	/**
	 * @return User
	 */
	public function create () {
		#src/db/User.hx:43: characters 3-22
		$u = new User();
		#src/db/User.hx:44: characters 3-46
		$u->name = $u->email = "user" . (mt_rand(0, 99998)??'null');
		#src/db/User.hx:45: characters 3-11
		return $u;
	}

	/**
	 * @return bool
	 */
	public function isAdmin () {
		#src/db/User.hx:39: characters 10-36
		if (($this->rights & (1 << Boot::dynamicField(UserFlags::Admin(), 'index'))) === 0) {
			#src/db/User.hx:39: characters 31-36
			return $this->id === 1;
		} else {
			#src/db/User.hx:39: characters 10-36
			return true;
		}
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$manager = new Manager(Boot::getClass(User::class));
	}
}

Boot::registerClass(User::class, 'db.User');
Boot::registerMeta(User::class, new HxAnon(["obj" => new HxAnon(["rtti" => \Array_hx::wrap(["oy7:hfieldsby7:zipCodeoy4:nameR1y1:tjy17:sys.db.RecordType:9:1i32y6:isNulltgy6:rightsoR2R6R3jR4:23:2ay5:AdminhfR5fgy5:phoneoR2R8R3jR4:9:1i19R5tgy4:passoR2R9R3jR4:9:1i128R5tgy10:newsletteroR2R10R3jR4:8:0R5fgR2oR2R2R3jR4:9:1i32R5tgy5:ldateoR2R11R3jR4:11:0R5tgy4:langoR2R12R3jR4:9:1i2R5fgy2:idoR2R13R3jR4:0:0R5fgy5:emailoR2R14R3jR4:9:1i128R5fgy4:cityoR2R15R3jR4:9:1i25R5tgy5:cdateoR2R16R3jR4:10:0R5fgy8:address2oR2R17R3jR4:9:1i64R5tgy8:address1oR2R18R3jR4:9:1i64R5tghR2y4:Usery9:relationsahy7:indexesahy6:fieldsar19r21r17r13r9r7r29r27r2r23r25r15r4r11hy3:keyaR13hg"])])]));
User::__hx__init();
