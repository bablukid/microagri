<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

use \php\_Boot\HxAnon;
use \php\Boot;
use \php\_Boot\HxClass;
use \haxe\CallStack;
use \php\_Boot\HxString;
use \php\_Boot\HxClosure;
use \php\_Boot\HxException;
use \php\_Boot\HxEnum;

/**
 * The Haxe Reflection API allows retrieval of type information at runtime.
 * This class complements the more lightweight Reflect class, with a focus on
 * class and enum instances.
 * @see https://haxe.org/manual/types.html
 * @see https://haxe.org/manual/std-reflection.html
 */
class Type {
	/**
	 * Returns a list of all constructors of enum `e` that require no
	 * arguments.
	 * This may return the empty Array `[]` if all constructors of `e` require
	 * arguments.
	 * Otherwise an instance of `e` constructed through each of its non-
	 * argument constructors is returned, in the order of the constructor
	 * declaration.
	 * If `e` is null, the result is unspecified.
	 * 
	 * @param Enum $e
	 * 
	 * @return \Array_hx
	 */
	static public function allEnums ($e) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:311: characters 3-29
		if ($e === null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:311: characters 18-29
			return null;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:313: characters 3-43
		$phpName = $e->phpClassName;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:315: characters 3-19
		$result = new \Array_hx();
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:317: lines 317-322
		$_g = 0;
		$_g1 = Type::getEnumConstructs($e);
		while ($_g < $_g1->length) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:317: characters 8-12
			$name = ($_g1->arr[$_g] ?? null);
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:317: lines 317-322
			++$_g;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:318: characters 4-57
			$reflection = new \ReflectionMethod($phpName, $name);
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:319: lines 319-321
			if ($reflection->getNumberOfParameters() === 0) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:320: characters 5-41
				$x = $reflection->invoke(null);
				$result->arr[$result->length] = $x;
				++$result->length;
			}
		}

		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:324: characters 3-16
		return $result;
	}

	/**
	 * Creates an instance of class `cl`.
	 * This function guarantees that the class constructor is not called.
	 * If `cl` is null, the result is unspecified.
	 * 
	 * @param Class $cl
	 * 
	 * @return mixed
	 */
	static public function createEmptyInstance ($cl) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:115: characters 3-40
		if (Boot::getClass('String') === $cl) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:115: characters 26-40
			return "";
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:116: characters 3-39
		if (Boot::getClass(\Array_hx::class) === $cl) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:116: characters 25-39
			return new \Array_hx();
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:118: characters 3-68
		$reflection = new \ReflectionClass($cl->phpClassName);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:119: characters 3-52
		return $reflection->newInstanceWithoutConstructor();
	}

	/**
	 * Creates an instance of enum `e` by calling its constructor `constr` with
	 * arguments `params`.
	 * If `e` or `constr` is null, or if enum `e` has no constructor named
	 * `constr`, or if the number of elements in `params` does not match the
	 * expected number of constructor arguments, or if any argument has an
	 * invalid type, the result is unspecified.
	 * 
	 * @param Enum $e
	 * @param string $constr
	 * @param \Array_hx $params
	 * 
	 * @return mixed
	 */
	static public function createEnum ($e, $constr, $params = null) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:123: characters 3-47
		if (($e === null) || ($constr === null)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:123: characters 36-47
			return null;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:125: characters 3-43
		$phpName = $e->phpClassName;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:127: characters 50-57
		$tmp = $phpName;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:127: lines 127-129
		if (!in_array($constr, $tmp::{"__hx__list"}())) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:128: characters 4-9
			throw new HxException("No such constructor " . ($constr??'null'));
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:131: characters 62-69
		$tmp1 = $phpName;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:131: characters 3-92
		$paramsCounts = $tmp1::{"__hx__paramsCount"}();
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:132: lines 132-134
		if ((($params === null) && ($paramsCounts[$constr] !== 0)) || (($params !== null) && ($params->length !== $paramsCounts[$constr]))) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:133: characters 4-9
			throw new HxException("Provided parameters count does not match expected parameters count");
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:136: lines 136-141
		if ($params === null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:137: characters 29-36
			$tmp2 = $phpName;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:137: characters 4-45
			return $tmp2::{$constr}();
		} else {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:139: characters 4-60
			$nativeArgs = $params->arr;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:140: characters 29-36
			$tmp3 = $phpName;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:140: characters 4-71
			return $tmp3::{$constr}(...$nativeArgs);
		}
	}

	/**
	 * Creates an instance of enum `e` by calling its constructor number
	 * `index` with arguments `params`.
	 * The constructor indices are preserved from Haxe syntax, so the first
	 * declared is index 0, the next index 1 etc.
	 * If `e` or `constr` is null, or if enum `e` has no constructor named
	 * `constr`, or if the number of elements in `params` does not match the
	 * expected number of constructor arguments, or if any argument has an
	 * invalid type, the result is unspecified.
	 * 
	 * @param Enum $e
	 * @param int $index
	 * @param \Array_hx $params
	 * 
	 * @return mixed
	 */
	static public function createEnumIndex ($e, $index, $params = null) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:145: characters 3-46
		if (($e === null) || ($index === null)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:145: characters 35-46
			return null;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:147: characters 3-43
		$phpName = $e->phpClassName;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:149: characters 67-74
		$tmp = $phpName;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:149: characters 3-90
		$constructors = $tmp::{"__hx__list"}();
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:150: lines 150-152
		if (($index < 0) || ($index >= count($constructors))) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:151: characters 4-9
			throw new HxException("" . ($index??'null') . " is not a valid enum constructor index");
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:154: characters 3-36
		$constr = $constructors[$index];
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:155: characters 62-69
		$tmp1 = $phpName;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:155: characters 3-92
		$paramsCounts = $tmp1::{"__hx__paramsCount"}();
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:156: lines 156-158
		if ((($params === null) && ($paramsCounts[$constr] !== 0)) || (($params !== null) && ($params->length !== $paramsCounts[$constr]))) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:157: characters 4-9
			throw new HxException("Provided parameters count does not match expected parameters count");
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:160: lines 160-165
		if ($params === null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:161: characters 29-36
			$tmp2 = $phpName;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:161: characters 4-45
			return $tmp2::{$constr}();
		} else {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:163: characters 4-60
			$nativeArgs = $params->arr;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:164: characters 29-36
			$tmp3 = $phpName;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:164: characters 4-71
			return $tmp3::{$constr}(...$nativeArgs);
		}
	}

	/**
	 * Recursively compares two enum instances `a` and `b` by value.
	 * Unlike `a == b`, this function performs a deep equality check on the
	 * arguments of the constructors, if exists.
	 * If `a` or `b` are null, the result is unspecified.
	 * 
	 * @param mixed $a
	 * @param mixed $b
	 * 
	 * @return bool
	 */
	static public function enumEq ($a, $b) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:262: characters 3-26
		if (Boot::equal($a, $b)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:262: characters 15-26
			return true;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:263: characters 3-43
		if (($a === null) || ($b === null)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:263: characters 31-43
			return false;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:265: lines 265-295
		try {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:266: characters 4-74
			if (!Boot::equal(get_class($a), get_class($b))) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:266: characters 62-74
				return false;
			}
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:267: characters 4-50
			if (Boot::dynamicField($a, 'index') !== Boot::dynamicField($b, 'index')) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:267: characters 38-50
				return false;
			}
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:269: characters 4-63
			$aParams = Boot::dynamicField($a, 'params');
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:270: characters 4-63
			$bParams = Boot::dynamicField($b, 'params');
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:271: lines 271-290
			$_g = 0;
			$_g1 = count($aParams);
			while ($_g < $_g1) {
				$i = $_g++;
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:273: lines 273-278
				if (($aParams[$i] instanceof HxEnum)) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:274: lines 274-276
					if (!Type::enumEq($aParams[$i], $bParams[$i])) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:275: characters 7-19
						return false;
					}
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:277: characters 6-14
					continue;
				}
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:280: characters 9-39
				$f = $aParams[$i];
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:280: lines 280-285
				if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:281: lines 281-283
					if (!\Reflect::compareMethods($aParams[$i], $bParams[$i])) {
						#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:282: characters 7-19
						return false;
					}
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:284: characters 6-14
					continue;
				}
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:287: lines 287-289
				if (!Boot::equal($aParams[$i], $bParams[$i])) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:288: characters 6-18
					return false;
				}
			}

			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:292: characters 4-15
			return true;
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:294: characters 4-16
			return false;
		}
	}

	/**
	 * Returns the class of `o`, if `o` is a class instance.
	 * If `o` is null or of a different type, null is returned.
	 * In general, type parameter information cannot be obtained at runtime.
	 * 
	 * @param mixed $o
	 * 
	 * @return Class
	 */
	static public function getClass ($o) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:44: lines 44-51
		if (is_object($o) && !($o instanceof HxClass) && !($o instanceof HxEnum)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:45: characters 4-54
			$cls = Boot::getClass(get_class($o));
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:46: characters 11-54
			if ($cls === Boot::getClass(HxAnon::class)) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:46: characters 38-42
				return null;
			} else {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:46: characters 45-53
				return $cls;
			}
		} else if (is_string($o)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:48: characters 4-22
			return Boot::getClass('String');
		} else {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:50: characters 4-15
			return null;
		}
	}

	/**
	 * Returns the name of class `c`, including its path.
	 * If `c` is inside a package, the package structure is returned dot-
	 * separated, with another dot separating the class name:
	 * `pack1.pack2.(...).packN.ClassName`
	 * If `c` is a sub-type of a Haxe module, that module is not part of the
	 * package structure.
	 * If `c` has no package, the class name is returned.
	 * If `c` is null, the result is unspecified.
	 * The class name does not include any type parameters.
	 * 
	 * @param Class $c
	 * 
	 * @return string
	 */
	static public function getClassName ($c) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:67: characters 3-28
		if ($c === null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:67: characters 17-28
			return null;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:68: characters 3-34
		return Boot::getHaxeName($c);
	}

	/**
	 * Returns a list of the names of all constructors of enum `e`.
	 * The order of the constructor names in the returned Array is preserved
	 * from the original syntax.
	 * If `e` is null, the result is unspecified.
	 * 
	 * @param Enum $e
	 * 
	 * @return \Array_hx
	 */
	static public function getEnumConstructs ($e) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:236: characters 3-29
		if ($e === null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:236: characters 18-29
			return null;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:237: characters 3-60
		return \Array_hx::wrap($e->__hx__list());
	}

	/**
	 * Returns the name of enum `e`, including its path.
	 * If `e` is inside a package, the package structure is returned dot-
	 * separated, with another dot separating the enum name:
	 * `pack1.pack2.(...).packN.EnumName`
	 * If `e` is a sub-type of a Haxe module, that module is not part of the
	 * package structure.
	 * If `e` has no package, the enum name is returned.
	 * If `e` is null, the result is unspecified.
	 * The enum name does not include any type parameters.
	 * 
	 * @param Enum $e
	 * 
	 * @return string
	 */
	static public function getEnumName ($e) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:72: characters 3-30
		return Type::getClassName($e);
	}

	/**
	 * Returns a list of the instance fields of class `c`.
	 * This only includes fields which are known at compile-time. In
	 * particular, using getInstanceFields(getClass(obj)) will not include
	 * any fields which were added to obj at runtime.
	 * The order of the fields in the returned Array is unspecified.
	 * If `c` is null, the result is unspecified.
	 * (As3) This method only returns instance fields that are public.
	 * 
	 * @param Class $c
	 * 
	 * @return \Array_hx
	 */
	static public function getInstanceFields ($c) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:169: characters 3-29
		if ($c === null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:169: characters 18-29
			return null;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:170: lines 170-176
		if ($c === Boot::getClass('String')) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:171: lines 171-175
			return \Array_hx::wrap([
				"substr",
				"charAt",
				"charCodeAt",
				"indexOf",
				"lastIndexOf",
				"split",
				"toLowerCase",
				"toUpperCase",
				"toString",
				"length",
			]);
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:178: characters 3-67
		$reflection = new \ReflectionClass($c->phpClassName);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:180: characters 17-34
		$this1 = [];
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:180: characters 3-35
		$methods = $this1;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:181: characters 18-41
		$data = $reflection->getMethods();
		$_g_current = 0;
		$_g_length = count($data);
		$_g_data = $data;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:181: lines 181-188
		while ($_g_current < $_g_length) {
			$method = $_g_data[$_g_current++];
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:182: lines 182-187
			if (!$method->isStatic()) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:183: characters 5-33
				$name = $method->getName();
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:184: lines 184-186
				if (!(($name === "__construct") || (HxString::indexOf($name, "__hx_") === 0))) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:185: characters 6-30
					array_push($methods, $name);
				}
			}
		}

		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:190: characters 20-37
		$this2 = [];
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:190: characters 3-38
		$properties = $this2;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:191: characters 20-46
		$data1 = $reflection->getProperties();
		$_g1_current = 0;
		$_g1_length = count($data1);
		$_g1_data = $data1;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:191: lines 191-198
		while ($_g1_current < $_g1_length) {
			$property = $_g1_data[$_g1_current++];
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:192: lines 192-197
			if (!$property->isStatic()) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:193: characters 5-35
				$name1 = $property->getName();
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:194: lines 194-196
				if (!(($name1 === "__construct") || (HxString::indexOf($name1, "__hx_") === 0))) {
					#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:195: characters 6-33
					array_push($properties, $name1);
				}
			}
		}

		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:199: characters 3-13
		$properties = array_diff($properties, $methods);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:201: characters 3-56
		$fields = array_merge($properties, $methods);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:203: characters 3-44
		return \Array_hx::wrap($fields);
	}

	/**
	 * Returns the super-class of class `c`.
	 * If `c` has no super class, null is returned.
	 * If `c` is null, the result is unspecified.
	 * In general, type parameter information cannot be obtained at runtime.
	 * 
	 * @param Class $c
	 * 
	 * @return Class
	 */
	static public function getSuperClass ($c) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:60: characters 3-28
		if ($c === null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:60: characters 17-28
			return null;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:61: characters 3-68
		$parentClass = get_parent_class($c->phpClassName);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:62: characters 3-31
		if (!$parentClass) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:62: characters 20-31
			return null;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:63: characters 3-41
		return Boot::getClass($parentClass);
	}

	/**
	 * Resolves a class by name.
	 * If `name` is the path of an existing class, that class is returned.
	 * Otherwise null is returned.
	 * If `name` is null or the path to a different type, the result is
	 * unspecified.
	 * The class name must not include any type parameters.
	 * 
	 * @param string $name
	 * 
	 * @return Class
	 */
	static public function resolveClass ($name) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:76: characters 3-32
		if ($name === null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:76: characters 21-32
			return null;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:77: lines 77-85
		if ($name === "Bool") {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:81: characters 18-34
			return Boot::getClass('Bool');
		} else if ($name === "Class") {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:83: characters 18-35
			return Boot::getClass('Class');
		} else if ($name === "Dynamic") {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:78: characters 20-39
			return Boot::getClass('Dynamic');
		} else if ($name === "Enum") {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:84: characters 17-33
			return Boot::getClass('Enum');
		} else if ($name === "Float") {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:80: characters 18-35
			return Boot::getClass('Float');
		} else if ($name === "Int") {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:79: characters 16-31
			return Boot::getClass('Int');
		} else if ($name === "String") {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:82: characters 19-32
			return Boot::getClass('String');
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:87: characters 3-40
		$phpClass = Boot::getPhpName($name);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:88: characters 3-88
		if (!class_exists($phpClass) && !interface_exists($phpClass)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:88: characters 77-88
			return null;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:90: characters 3-41
		$hxClass = Boot::getClass($phpClass);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:92: characters 3-22
		return $hxClass;
	}

	/**
	 * Resolves an enum by name.
	 * If `name` is the path of an existing enum, that enum is returned.
	 * Otherwise null is returned.
	 * If `name` is null the result is unspecified.
	 * If `name` is the path to a different type, null is returned.
	 * The enum name must not include any type parameters.
	 * 
	 * @param string $name
	 * 
	 * @return Enum
	 */
	static public function resolveEnum ($name) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:96: characters 3-32
		if ($name === null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:96: characters 21-32
			return null;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:97: characters 3-39
		if ($name === "Bool") {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:97: characters 23-39
			return Boot::getClass('Bool');
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:99: characters 3-40
		$phpClass = Boot::getPhpName($name);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:100: characters 3-50
		if (!class_exists($phpClass)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:100: characters 39-50
			return null;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:102: characters 3-41
		$hxClass = Boot::getClass($phpClass);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:104: characters 3-22
		return $hxClass;
	}

	/**
	 * Returns the runtime type of value `v`.
	 * The result corresponds to the type `v` has at runtime, which may vary
	 * per platform. Assumptions regarding this should be minimized to avoid
	 * surprises.
	 * 
	 * @param mixed $v
	 * 
	 * @return \ValueType
	 */
	static public function typeof ($v) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:241: characters 3-30
		if ($v === null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:241: characters 18-30
			return \ValueType::TNull();
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:243: lines 243-251
		if (is_object($v)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:244: characters 4-47
			if (($v instanceof \Closure) || ($v instanceof HxClosure)) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:244: characters 31-47
				return \ValueType::TFunction();
			}
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:245: characters 4-43
			if (($v instanceof \StdClass)) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:245: characters 29-43
				return \ValueType::TObject();
			}
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:246: characters 4-39
			if (($v instanceof HxClass)) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:246: characters 25-39
				return \ValueType::TObject();
			}
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:248: characters 4-53
			$hxClass = Boot::getClass(get_class($v));
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:249: characters 4-55
			if (($v instanceof HxEnum)) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:249: characters 29-55
				return \ValueType::TEnum($hxClass);
			}
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:250: characters 4-31
			return \ValueType::TClass($hxClass);
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:253: characters 3-32
		if (is_bool($v)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:253: characters 20-32
			return \ValueType::TBool();
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:254: characters 3-30
		if (is_int($v)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:254: characters 19-30
			return \ValueType::TInt();
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:255: characters 3-34
		if (is_float($v)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:255: characters 21-34
			return \ValueType::TFloat();
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:256: characters 3-43
		if (is_string($v)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:256: characters 22-43
			return \ValueType::TClass(Boot::getClass('String'));
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/Type.hx:258: characters 3-18
		return \ValueType::TUnknown();
	}
}

Boot::registerClass(Type::class, 'Type');
