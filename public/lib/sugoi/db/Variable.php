<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace sugoi\db;

use \php\_Boot\HxAnon;
use \php\Boot;
use \sys\db\Object_hx;
use \sys\db\Manager;

class Variable extends Object_hx {
	/**
	 * @var Manager
	 */
	static public $manager;

	/**
	 * @var string
	 */
	public $name;
	/**
	 * @var string
	 */
	public $value;

	/**
	 * @param string $name
	 * 
	 * @return string
	 */
	static public function get ($name) {
		#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:11: characters 3-35
		$v = Variable::$manager->unsafeGet($name, false);
		#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:12: characters 10-36
		if ($v === null) {
			#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:12: characters 22-26
			return null;
		} else {
			#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:12: characters 29-36
			return $v->value;
		}
	}

	/**
	 * @param string $name
	 * 
	 * @return int
	 */
	static public function getInt ($name) {
		#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:44: characters 3-35
		$v = Variable::$manager->unsafeGet($name, false);
		#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:45: characters 10-47
		if ($v === null) {
			#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:45: characters 22-23
			return 0;
		} else {
			#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:45: characters 26-47
			return \Std::parseInt($v->value);
		}
	}

	/**
	 * @param string $name
	 * @param int $inc
	 * 
	 * @return void
	 */
	static public function increment ($name, $inc = 1) {
		#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:29: lines 29-41
		if ($inc === null) {
			$inc = 1;
		}
		#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:30: characters 3-43
		$v = Variable::$manager->unsafeGet($name, true);
		#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:31: lines 31-40
		if ($v === null) {
			#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:32: characters 4-22
			$v = new Variable();
			#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:33: characters 4-17
			$v->name = $name;
			#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:34: characters 4-29
			$v->value = \Std::string($inc);
			#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:35: characters 4-14
			$v->insert();
		} else {
			#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:38: characters 4-49
			$v->value = \Std::string(\Std::parseInt($v->value) + 1);
			#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:39: characters 4-14
			$v->update();
		}
	}

	/**
	 * @param string $name
	 * @param mixed $val
	 * 
	 * @return void
	 */
	static public function set ($name, $val) {
		#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:16: characters 3-43
		$v = Variable::$manager->unsafeGet($name, true);
		#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:17: lines 17-26
		if ($v === null) {
			#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:18: characters 4-22
			$v = new Variable();
			#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:19: characters 4-17
			$v->name = $name;
			#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:20: characters 4-29
			$v->value = \Std::string($val);
			#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:21: characters 4-14
			$v->insert();
		} else {
			#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:24: characters 4-29
			$v->value = \Std::string($val);
			#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:25: characters 4-14
			$v->update();
		}
	}

	/**
	 * @return void
	 */
	public function __construct () {
		#/home/bubar/projects/sugoi/src/sugoi/db/Variable.hx:5: lines 5-48
		parent::__construct();
	}

	/**
	 * @return Manager
	 */
	public function __getManager () {
		#/home/bubar/projects/spod/src/sys/db/RecordMacros.hx:1432: characters 19-40
		return Variable::$manager;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$manager = new Manager(Boot::getClass(Variable::class));
	}
}

Boot::registerClass(Variable::class, 'sugoi.db.Variable');
Boot::registerMeta(Variable::class, new HxAnon(["obj" => new HxAnon(["rtti" => \Array_hx::wrap(["oy7:hfieldsby5:valueoy4:nameR1y1:tjy17:sys.db.RecordType:9:1i50y6:isNullfgR2oR2R2R3jR4:9:1i50R5fghR2y8:Variabley9:relationsahy7:indexesahy6:fieldsar4r2hy3:keyaR2hg"])])]));
Variable::__hx__init();
