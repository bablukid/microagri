<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace sugoi\db;

use \php\_Boot\HxAnon;
use \php\Boot;
use \sys\db\Object_hx;
use \sys\db\Manager;
use \haxe\Unserializer;
use \haxe\Serializer;

/**
 * Key-Value temporary storage in a Memcached style
 */
class Cache extends Object_hx {
	/**
	 * @var Manager
	 */
	static public $manager;

	/**
	 * @var \Date
	 */
	public $cdate;
	/**
	 * @var \Date
	 */
	public $expire;
	/**
	 * @var string
	 */
	public $name;
	/**
	 * @var string
	 */
	public $value;

	/**
	 * Delete a value for key $id
	 * 
	 * @param string $id
	 * 
	 * @return void
	 */
	static public function destroy ($id) {
		#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:60: characters 3-33
		$c = Cache::$manager->unsafeGet($id, true);
		#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:61: characters 3-28
		if ($c !== null) {
			#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:61: characters 18-28
			$c->delete();
		}
	}

	/**
	 * Read the value for key $id
	 * 
	 * @param string $id
	 * 
	 * @return mixed
	 */
	static public function get ($id) {
		#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:24: characters 3-72
		if (mt_rand(0, 999) === 0) {
			#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:24: characters 30-72
			Cache::$manager->unsafeDelete("DELETE FROM Cache WHERE expire<" . (Manager::quoteAny(\Date::now())??'null'));
		}
		#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:26: characters 3-33
		$c = Cache::$manager->unsafeGet($id, true);
		#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:27: characters 3-29
		if ($c === null) {
			#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:27: characters 18-29
			return null;
		}
		#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:28: lines 28-31
		if ($c->expire->getTime() < \Date::now()->getTime()) {
			#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:29: characters 4-14
			$c->delete();
			#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:30: characters 4-15
			return null;
		}
		#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:32: characters 3-40
		return Unserializer::run($c->value);
	}

	/**
	 * Set a value for key $id
	 * and optionnaly a lifetime in seconds
	 * 
	 * @param string $id
	 * @param mixed $value
	 * @param float $expireInSeconds
	 * 
	 * @return void
	 */
	static public function set ($id, $value, $expireInSeconds) {
		#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:40: characters 3-33
		$c = Cache::$manager->unsafeGet($id, true);
		#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:41: characters 3-20
		$niou = false;
		#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:42: lines 42-46
		if ($c === null) {
			#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:43: characters 4-15
			$niou = true;
			#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:44: characters 4-19
			$c = new Cache();
			#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:45: characters 4-15
			$c->name = $id;
		}
		#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:47: characters 3-39
		$c->value = Serializer::run($value);
		#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:48: characters 3-65
		$c->expire = \Date::fromTime(\Date::now()->getTime() + $expireInSeconds * 1000.0);
		#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:49: lines 49-53
		if ($niou) {
			#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:50: characters 4-14
			$c->insert();
		} else {
			#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:52: characters 4-14
			$c->update();
		}
	}

	/**
	 * @return void
	 */
	public function __construct () {
		#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:16: characters 3-10
		parent::__construct();
		#/home/bubar/projects/sugoi/src/sugoi/db/Cache.hx:17: characters 3-21
		$this->cdate = \Date::now();
	}

	/**
	 * @return Manager
	 */
	public function __getManager () {
		#/home/bubar/projects/spod/src/sys/db/RecordMacros.hx:1432: characters 19-40
		return Cache::$manager;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$manager = new Manager(Boot::getClass(Cache::class));
	}
}

Boot::registerClass(Cache::class, 'sugoi.db.Cache');
Boot::registerMeta(Cache::class, new HxAnon(["obj" => new HxAnon(["rtti" => \Array_hx::wrap(["oy7:hfieldsby5:valueoy4:nameR1y1:tjy17:sys.db.RecordType:15:0y6:isNullfgR2oR2R2R3jR4:9:1i128R5fgy6:expireoR2R6R3jR4:11:0R5fgy5:cdateoR2R7R3r7R5tghR2y5:Cachey9:relationsahy7:indexesahy6:fieldsar4r2r6r8hy3:keyaR2hg"])])]));
Cache::__hx__init();
