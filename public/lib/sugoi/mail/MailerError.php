<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace sugoi\mail;

use \php\Boot;
use \tink\core\TypedError;
use \php\_Boot\HxEnum;

/**
 * Errors that occurs after sending an email thru a mailer
 */
class MailerError extends HxEnum {
	/**
	 * @param TypedError $e
	 * 
	 * @return MailerError
	 */
	static public function GenericError ($e) {
		return new MailerError('GenericError', 0, [$e]);
	}

	/**
	 * @return MailerError
	 */
	static public function HardBounce () {
		static $inst = null;
		if (!$inst) $inst = new MailerError('HardBounce', 1, []);
		return $inst;
	}

	/**
	 * @return MailerError
	 */
	static public function SoftBounce () {
		static $inst = null;
		if (!$inst) $inst = new MailerError('SoftBounce', 2, []);
		return $inst;
	}

	/**
	 * @return MailerError
	 */
	static public function Spam () {
		static $inst = null;
		if (!$inst) $inst = new MailerError('Spam', 3, []);
		return $inst;
	}

	/**
	 * @return MailerError
	 */
	static public function Unsigned () {
		static $inst = null;
		if (!$inst) $inst = new MailerError('Unsigned', 5, []);
		return $inst;
	}

	/**
	 * @return MailerError
	 */
	static public function Unsub () {
		static $inst = null;
		if (!$inst) $inst = new MailerError('Unsub', 4, []);
		return $inst;
	}

	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			0 => 'GenericError',
			1 => 'HardBounce',
			2 => 'SoftBounce',
			3 => 'Spam',
			5 => 'Unsigned',
			4 => 'Unsub',
		];
	}

	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'GenericError' => 1,
			'HardBounce' => 0,
			'SoftBounce' => 0,
			'Spam' => 0,
			'Unsigned' => 0,
			'Unsub' => 0,
		];
	}
}

Boot::registerClass(MailerError::class, 'sugoi.mail.MailerError');
