<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace sourcemap;

use \php\Boot;

class Vlq {
	/**
	 * @var int
	 */
	const MASK = 31;
	/**
	 * @var int
	 */
	const SHIFT = 5;

	/**
	 * Get a number in range 0...64 (excluding)
	 * @param charCode - A code of a valid base64 character. It's not verified, so be sure it's a valid character.
	 * @return Int
	 * 
	 * @param int $charCode
	 * 
	 * @return int
	 */
	static public function base64Decode ($charCode) {
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:15: characters 3-60
		if (97 <= $charCode) {
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:15: characters 29-60
			return $charCode - 97 + 26;
		}
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:16: characters 3-55
		if (65 <= $charCode) {
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:16: characters 29-55
			return $charCode - 65;
		}
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:17: characters 3-60
		if (48 <= $charCode) {
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:17: characters 29-60
			return $charCode - 48 + 52;
		}
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:18: characters 3-38
		if ($charCode === 43) {
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:18: characters 29-38
			return 62;
		}
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:19: characters 3-12
		return 63;
	}

	/**
	 * @param string $vlq
	 * 
	 * @return \Array_hx
	 */
	static public function decode ($vlq) {
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:23: characters 3-27
		$data = \Array_hx::wrap([
			0,
			0,
			0,
			0,
		]);
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:24: characters 3-18
		$index = -1;
		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:26: lines 26-39
		$_g = 0;
		$_g1 = $data->length;
		while ($_g < $_g1) {
			$i = $_g++;
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:27: characters 4-18
			$value = 0;
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:28: characters 4-18
			$shift = 0;
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:29: characters 4-22
			$digit = null;
			$masked = null;
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:30: lines 30-35
			while (true) {
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:31: characters 13-50
				$charCode = \StringTools::fastCodeAt($vlq, ++$index);
				$digit = (97 <= $charCode ? $charCode - 97 + 26 : (65 <= $charCode ? $charCode - 65 : (48 <= $charCode ? $charCode - 48 + 52 : ($charCode === 43 ? 62 : 63))));
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:32: characters 5-26
				$masked = $digit & 31;
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:33: characters 5-29
				$value += $masked << $shift;
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:34: characters 5-19
				$shift += 5;
				#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:30: lines 30-35
				if (!($digit !== $masked)) {
					break;
				}
			}
			#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:38: characters 4-59
			$data[$i] = (($value & 1) === 1 ? -($value >> 1) : $value >> 1);
		}

		#/home/bubar/haxe/haxe_libraries/sourcemap/1.0.0/haxelib/src/sourcemap/Vlq.hx:41: characters 10-27
		$this1 = $data;
		return $this1;
	}
}

Boot::registerClass(Vlq::class, 'sourcemap.Vlq');
