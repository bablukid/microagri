<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace sys\io;

use \sys\io\_Process\WritablePipe;
use \php\Boot;
use \haxe\io\Output;
use \haxe\io\Error;
use \haxe\io\Input;
use \php\_Boot\HxException;
use \sys\io\_Process\ReadablePipe;

class Process {
	/**
	 * @var int
	 */
	public $_exitCode;
	/**
	 * @var int
	 */
	public $pid;
	/**
	 * @var mixed
	 */
	public $pipes;
	/**
	 * @var mixed
	 */
	public $process;
	/**
	 * @var bool
	 */
	public $running;
	/**
	 * @var Input
	 * Standard error. The output stream to output error messages or diagnostics.
	 */
	public $stderr;
	/**
	 * @var Output
	 * Standard input. The stream data going into a process.
	 */
	public $stdin;
	/**
	 * @var Input
	 * Standard output. The output stream where a process writes its output data.
	 */
	public $stdout;

	/**
	 * Construct a `Process` object, which run the given command immediately.
	 * Command arguments can be passed in two ways: 1. using `args`, 2. appending to `cmd` and leaving `args` as `null`.
	 * 1. When using `args` to pass command arguments, each argument will be automatically quoted, and shell meta-characters will be escaped if needed.
	 * `cmd` should be an executable name that can be located in the `PATH` environment variable, or a path to an executable.
	 * 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
	 * It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).
	 * `close()` should be called when the `Process` is no longer used.
	 * 
	 * @param string $cmd
	 * @param \Array_hx $args
	 * @param bool $detached
	 * 
	 * @return void
	 */
	public function __construct ($cmd, $args = null, $detached = null) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:121: characters 24-26
		$this->_exitCode = -1;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:120: characters 23-27
		$this->running = true;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:119: characters 18-20
		$this->pid = -1;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:137: characters 3-23
		if ($detached) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:137: characters 18-23
			throw new HxException("Detached process is not supported on this platform");
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:138: lines 138-142
		$descriptors = [["pipe", "r"], ["pipe", "w"], ["pipe", "w"]];
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:143: characters 3-66
		$result = proc_open($this->buildCmd($cmd, $args), $descriptors, $this->pipes);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:144: characters 3-29
		if ($result === false) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:144: characters 24-29
			throw new HxException(Error::Custom("Failed to start process: " . ($cmd??'null')));
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:145: characters 3-19
		$this->process = $result;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:147: characters 3-17
		$this->updateStatus();
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:149: characters 3-40
		$this->stdin = new WritablePipe($this->pipes[0]);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:150: characters 3-42
		$this->stdout = new ReadablePipe($this->pipes[1]);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:151: characters 3-42
		$this->stderr = new ReadablePipe($this->pipes[2]);
	}

	/**
	 * @param string $cmd
	 * @param \Array_hx $args
	 * 
	 * @return string
	 */
	public function buildCmd ($cmd, $args = null) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:193: characters 3-31
		if ($args === null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:193: characters 21-31
			return $cmd;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:195: characters 18-34
		if (\Sys::systemName() === "Windows") {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:197: characters 5-85
			$_this = (\Array_hx::wrap([\StringTools::replace($cmd, "/", "\\")]))->concat($args);
			$f = function ($argument) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:197: characters 47-75
				return \StringTools::quoteWinArg($argument, true);
			};
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:197: characters 5-85
			$result = [];
			$collection = $_this->arr;
			foreach ($collection as $key => $value) {
				$result[] = $f($value);
			}

			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:197: characters 5-95
			return \Array_hx::wrap($result)->join(" ");
		} else {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:199: characters 5-53
			$_this1 = (\Array_hx::wrap([$cmd]))->concat($args);
			$f1 = Boot::getStaticClosure(\StringTools::class, 'quoteUnixArg');
			$result1 = [];
			$collection1 = $_this1->arr;
			foreach ($collection1 as $key1 => $value1) {
				$result1[] = $f1($value1);
			}

			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:199: characters 5-63
			return \Array_hx::wrap($result1)->join(" ");
		}
	}

	/**
	 * @param bool $block
	 * 
	 * @return int
	 */
	public function exitCode ($block = true) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:161: lines 161-172
		if ($block === null) {
			$block = true;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:162: lines 162-165
		if (!$block) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:163: characters 4-18
			$this->updateStatus();
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:164: characters 11-39
			if ($this->running) {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:164: characters 22-26
				return null;
			} else {
				#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:164: characters 29-38
				return $this->_exitCode;
			}
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:166: lines 166-170
		while ($this->running) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:167: characters 4-40
			$arr = [$this->process];
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:168: characters 4-62
			@stream_select($arr, $arr, $arr, null);
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:169: characters 4-18
			$this->updateStatus();
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:171: characters 3-19
		return $this->_exitCode;
	}

	/**
	 * @return void
	 */
	public function updateStatus () {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:204: characters 3-23
		if (!$this->running) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:204: characters 17-23
			return;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:206: characters 3-42
		$status = proc_get_status($this->process);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:207: characters 3-29
		if ($status === false) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:207: characters 24-29
			throw new HxException(Error::Custom("Failed to obtain process status"));
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:208: characters 3-48
		$status1 = $status;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:210: characters 3-22
		$this->pid = $status1["pid"];
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:211: characters 3-30
		$this->running = $status1["running"];
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/io/Process.hx:212: characters 3-33
		$this->_exitCode = $status1["exitcode"];
	}
}

Boot::registerClass(Process::class, 'sys.io.Process');
