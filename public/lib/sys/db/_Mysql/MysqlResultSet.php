<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace sys\db\_Mysql;

use \php\_Boot\HxAnon;
use \php\Boot;
use \sys\db\ResultSet;
use \haxe\ds\List_hx;

class MysqlResultSet implements ResultSet {
	/**
	 * @var string
	 */
	static public $hxAnonClassName;

	/**
	 * @var mixed
	 */
	public $fetchedRow;
	/**
	 * @var mixed
	 */
	public $fieldsInfo;
	/**
	 * @var \Myslqi_result
	 */
	public $result;

	/**
	 * @param \Myslqi_result $result
	 * 
	 * @return void
	 */
	public function __construct ($result) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:132: characters 3-23
		$this->result = $result;
	}

	/**
	 * @param mixed $row
	 * 
	 * @return mixed
	 */
	public function correctArrayTypes ($row) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:189: lines 189-195
		$_gthis = $this;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:190: characters 20-35
		$_gthis1 = $this;
		if ($this->fieldsInfo === null) {
			$this->fieldsInfo = [];
			$collection = $this->result->fetch_fields();
			foreach ($collection as $key => $value) {
				$_gthis1->fieldsInfo[$value->name] = $value;
			}

		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:190: characters 3-36
		$fieldsInfo = $this->fieldsInfo;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:191: lines 191-193
		foreach ($row as $key1 => $value1) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:192: characters 4-59
			$row[$key1] = $_gthis->correctType($value1, $fieldsInfo[$key1]->type);
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:194: characters 3-18
		return $row;
	}

	/**
	 * @param object $row
	 * 
	 * @return object
	 */
	public function correctObjectTypes ($row) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:197: lines 197-204
		$_gthis = $this;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:198: characters 20-35
		$_gthis1 = $this;
		if ($this->fieldsInfo === null) {
			$this->fieldsInfo = [];
			$collection = $this->result->fetch_fields();
			foreach ($collection as $key => $value) {
				$_gthis1->fieldsInfo[$value->name] = $value;
			}

		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:198: characters 3-36
		$fieldsInfo = $this->fieldsInfo;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:199: lines 199-202
		foreach ($row as $key1 => $value1) {
			$value2 = $value1;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:200: characters 4-54
			$value2 = $_gthis->correctType($value2, $fieldsInfo[$key1]->type);
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:201: characters 20-23
			$tmp = $row;
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:201: characters 4-38
			$tmp->{$key1} = $value2;

		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:203: characters 3-13
		return $row;
	}

	/**
	 * @param string $value
	 * @param int $type
	 * 
	 * @return mixed
	 */
	public function correctType ($value, $type) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:217: characters 3-33
		if ($value === null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:217: characters 22-33
			return null;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:218: lines 218-227
		if (($type === MYSQLI_TYPE_BIT) || ($type === MYSQLI_TYPE_TINY) || ($type === MYSQLI_TYPE_SHORT) || ($type === MYSQLI_TYPE_LONG) || ($type === MYSQLI_TYPE_INT24) || ($type === MYSQLI_TYPE_CHAR)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:226: characters 4-28
			return (int)($value);
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:228: lines 228-235
		if (($type === MYSQLI_TYPE_DECIMAL) || ($type === MYSQLI_TYPE_NEWDECIMAL) || ($type === MYSQLI_TYPE_FLOAT) || ($type === MYSQLI_TYPE_DOUBLE)) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:234: characters 4-30
			return (float)($value);
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:236: characters 3-15
		return $value;
	}

	/**
	 * @return void
	 */
	public function fetchNext () {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:178: characters 3-34
		$row = $this->result->fetch_assoc();
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:179: characters 3-55
		if ($row !== null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:179: characters 20-55
			$this->fetchedRow = $this->correctArrayTypes($row);
		}
	}

	/**
	 * @param int $n
	 * 
	 * @return int
	 */
	public function getIntResult ($n) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:165: characters 10-34
		return (int)($this->getResult($n));
	}

	/**
	 * @param int $n
	 * 
	 * @return string
	 */
	public function getResult ($n) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:160: characters 3-38
		if ($this->fetchedRow === null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:160: characters 27-38
			$this->fetchNext();
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:161: characters 10-44
		return array_values($this->fetchedRow)[$n];
	}

	/**
	 * @return int
	 */
	public function get_length () {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:239: characters 24-46
		return $this->result->num_rows;
	}

	/**
	 * @return bool
	 */
	public function hasNext () {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:136: characters 3-38
		if ($this->fetchedRow === null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:136: characters 27-38
			$this->fetchNext();
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:137: characters 3-28
		return $this->fetchedRow !== null;
	}

	/**
	 * @return mixed
	 */
	public function next () {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:141: characters 3-38
		if ($this->fetchedRow === null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:141: characters 27-38
			$this->fetchNext();
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:142: characters 3-27
		return $this->withdrawFetched();
	}

	/**
	 * @return List_hx
	 */
	public function results () {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:146: characters 3-25
		$list = new List_hx();
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:148: characters 3-22
		$this->result->data_seek(0);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:149: characters 3-50
		$row = $this->result->fetch_object(MysqlResultSet::$hxAnonClassName);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:150: lines 150-154
		while ($row !== null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:151: characters 4-33
			$row = $this->correctObjectTypes($row);
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:152: characters 4-17
			$list->add($row);
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:153: characters 4-46
			$row = $this->result->fetch_object(MysqlResultSet::$hxAnonClassName);
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:156: characters 3-14
		return $list;
	}

	/**
	 * @return mixed
	 */
	public function withdrawFetched () {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:183: characters 3-38
		if ($this->fetchedRow === null) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:183: characters 27-38
			return null;
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:184: characters 3-24
		$row = $this->fetchedRow;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:185: characters 3-20
		$this->fetchedRow = null;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/db/Mysql.hx:186: characters 3-30
		return new HxAnon($row);
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$hxAnonClassName = Boot::getClass(HxAnon::class)->phpClassName;
	}
}

Boot::registerClass(MysqlResultSet::class, 'sys.db._Mysql.MysqlResultSet');
MysqlResultSet::__hx__init();
