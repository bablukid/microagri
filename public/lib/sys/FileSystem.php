<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace sys;

use \php\_Boot\HxAnon;
use \php\Boot;
use \php\_Boot\HxException;

/**
 * This class allows you to get information about the files and directories.
 * See `sys.io.File` for the complementary file API.
 */
class FileSystem {
	/**
	 * Returns `FileStat` information on the file or directory specified by
	 * `path`.
	 * If `path` is null, the result is unspecified.
	 * 
	 * @param string $path
	 * 
	 * @return object
	 */
	static public function stat ($path) {
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/FileSystem.hx:46: characters 3-36
		clearstatcache(true, $path);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/FileSystem.hx:47: characters 3-32
		$info = stat($path);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/FileSystem.hx:48: characters 3-27
		if ($info === false) {
			#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/FileSystem.hx:48: characters 22-27
			throw new HxException("Unable to stat " . ($path??'null'));
		}
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/FileSystem.hx:49: characters 3-31
		$info1 = $info;
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/FileSystem.hx:54: characters 12-47
		$tmp = \Date::fromTime($info1["atime"] * 1000);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/FileSystem.hx:55: characters 12-47
		$tmp1 = \Date::fromTime($info1["mtime"] * 1000);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/FileSystem.hx:56: characters 12-47
		$tmp2 = \Date::fromTime($info1["ctime"] * 1000);
		#/home/bubar/haxe/versions/4.0.0-rc.1/std/php/_std/sys/FileSystem.hx:51: lines 51-63
		return new HxAnon([
			"gid" => $info1["gid"],
			"uid" => $info1["uid"],
			"atime" => $tmp,
			"mtime" => $tmp1,
			"ctime" => $tmp2,
			"dev" => $info1["dev"],
			"ino" => $info1["ino"],
			"nlink" => $info1["nlink"],
			"rdev" => $info1["rdev"],
			"size" => $info1["size"],
			"mode" => $info1["mode"],
		]);
	}
}

Boot::registerClass(FileSystem::class, 'sys.FileSystem');
